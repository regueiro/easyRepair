package es.regueiro.easyrepair.ui.stock;

import com.google.i18n.phonenumbers.NumberParseException;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;
import es.regueiro.easyrepair.model.employee.Employee;
import es.regueiro.easyrepair.model.stock.PartOrder;
import es.regueiro.easyrepair.model.shared.Address;
import es.regueiro.easyrepair.model.shared.Email;
import es.regueiro.easyrepair.model.shared.Invoice;
import es.regueiro.easyrepair.model.shared.Phone;
import es.regueiro.easyrepair.model.stock.PartLine;
import es.regueiro.easyrepair.model.stock.Supplier;
import es.regueiro.easyrepair.model.stock.Warehouse;
import es.regueiro.easyrepair.reports.ReportPrinter;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Collection;
import java.util.List;
import javax.swing.SwingWorker;
import org.apache.commons.lang3.StringUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//es.regueiro.easyrepair.ui.stock//PartOrderDetailedView//EN",
autostore = false)
@TopComponent.Description(iconBase = "es/regueiro/easyrepair/ui/stock/icons/package_detailed.png", preferredID = "PartOrderDetailedViewTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(position = 8, mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "es.regueiro.easyrepair.ui.stock.PartOrderDetailedViewTopComponent")
@TopComponent.OpenActionRegistration(displayName = "#CTL_PartOrderDetailedViewAction",
preferredID = "PartOrderDetailedViewTopComponent")
@Messages({
    "CTL_PartOrderDetailedViewAction=Vista detallada de pedidos",
    "CTL_PartOrderDetailedViewTopComponent=Vista detallada de pedidos",
    "HINT_PartOrderDetailedViewTopComponent=Esta es una ventana de la vista detallada de pedidos"
})
public final class PartOrderDetailedViewTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<PartOrder> result = null;
    private PartOrder partOrder;
    private PartLineViewTableModel partsListModel = new PartLineViewTableModel();
    BigDecimal partsTotal = new BigDecimal("0");

    public PartOrderDetailedViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_PartOrderDetailedViewTopComponent());
        setToolTipText(Bundle.HINT_PartOrderDetailedViewTopComponent());
        this.setFocusable(true);


        partsTable.setModel(partsListModel);

        for (int i = 0; i < partsTable.getColumnCount(); i++) {
            partsTable.getColumnModel().getColumn(i).setCellRenderer(new PartLineTableCellRenderer());
        }

        mainTabbedPane.setIconAt(0, new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/stock/icons/package.png")));
        mainTabbedPane.setIconAt(1, new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/stock/icons/tire.png")));
        mainTabbedPane.setIconAt(2, new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/stock/icons/invoice.png")));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        mainScrollPane1 = new javax.swing.JScrollPane();
        mainGeneralPanel = new javax.swing.JPanel();
        generalPanel1 = new javax.swing.JPanel();
        generalLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        orderNumberLabel = new javax.swing.JLabel();
        orderNumberTextField = new javax.swing.JTextField();
        orderDateLabel = new javax.swing.JLabel();
        estimatedDateLabel = new javax.swing.JLabel();
        receiptDateLabel = new javax.swing.JLabel();
        shippingCostsLabel = new javax.swing.JLabel();
        shippingCostsTextField = new javax.swing.JTextField();
        otherCostsLabel = new javax.swing.JLabel();
        otherCostsTextField = new javax.swing.JTextField();
        discountLabel = new javax.swing.JLabel();
        discountTextField = new javax.swing.JTextField();
        orderStatusLabel = new javax.swing.JLabel();
        supplierLabel = new javax.swing.JLabel();
        responsibleLabel = new javax.swing.JLabel();
        warehouseLabel = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        totalWithIVALabel = new javax.swing.JLabel();
        totalTextField = new javax.swing.JTextField();
        totalWithIVATextField = new javax.swing.JTextField();
        responsibleTextField = new javax.swing.JTextField();
        supplierTextField = new javax.swing.JTextField();
        statusTextField = new javax.swing.JTextField();
        receiptDateTextField = new javax.swing.JTextField();
        estimatedDateTextField = new javax.swing.JTextField();
        orderDateTextField = new javax.swing.JTextField();
        warehouseTextField = new javax.swing.JTextField();
        printButton = new javax.swing.JButton();
        notesPanel1 = new javax.swing.JPanel();
        notesLabel = new javax.swing.JLabel();
        notesScrollPane = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        partsScrollPane = new javax.swing.JScrollPane();
        partsPanel = new javax.swing.JPanel();
        partsLabel = new javax.swing.JLabel();
        piecesPanel = new javax.swing.JScrollPane();
        partsTable = new javax.swing.JTable();
        bottomPanel = new javax.swing.JPanel();
        partsTotalLabel = new javax.swing.JLabel();
        partsTotalTextField = new javax.swing.JTextField();
        partsTotalWithIVALabel = new javax.swing.JLabel();
        partsTotalWithIVATextField = new javax.swing.JTextField();
        invoiceScrollPane = new javax.swing.JScrollPane();
        invoicePanel = new javax.swing.JPanel();
        invoiceGeneralPanel = new javax.swing.JPanel();
        invoiceLabel = new javax.swing.JLabel();
        invoiceNumberLabel = new javax.swing.JLabel();
        invoiceNumberTextField = new javax.swing.JTextField();
        invoiceDateLabel = new javax.swing.JLabel();
        invoiceAcceptedDateLabel = new javax.swing.JLabel();
        invoiceEstimatedPaymentDateLabel = new javax.swing.JLabel();
        invoicePaymentDateLabel = new javax.swing.JLabel();
        invoicePaymentMethodLabel = new javax.swing.JLabel();
        invoicePaymentMethodTextField = new javax.swing.JTextField();
        invoiceStatusLabel = new javax.swing.JLabel();
        invoiceResponsibleLabel = new javax.swing.JLabel();
        invoicePaymentDateTextField = new javax.swing.JTextField();
        invoiceEstimatedPaymentDateTextField = new javax.swing.JTextField();
        invoiceAcceptedDateTextField = new javax.swing.JTextField();
        invoiceDateTextField = new javax.swing.JTextField();
        invoiceStatusTextField = new javax.swing.JTextField();
        invoiceResponsibleTextField = new javax.swing.JTextField();
        printInvoiceButton = new javax.swing.JButton();
        invoiceNotesPanel = new javax.swing.JPanel();
        invoiceNotesLabel = new javax.swing.JLabel();
        invoiceNotesScrollPane = new javax.swing.JScrollPane();
        invoiceNotesTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        mainScrollPane.setBorder(null);
        mainScrollPane.setMinimumSize(new java.awt.Dimension(617, 22));

        mainPanel.setLayout(new java.awt.GridBagLayout());

        mainTabbedPane.setDoubleBuffered(true);

        mainScrollPane1.setBorder(null);

        mainGeneralPanel.setLayout(new java.awt.GridBagLayout());

        generalPanel1.setLayout(new java.awt.GridBagLayout());

        generalLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        generalLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(generalLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.generalLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        generalPanel1.add(generalLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(idLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.idLabel.text")); // NOI18N
        idLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(idLabel, gridBagConstraints);

        idTextField.setEditable(false);
        idTextField.setBackground(new java.awt.Color(232, 231, 231));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(idTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(orderNumberLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.orderNumberLabel.text")); // NOI18N
        orderNumberLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(orderNumberLabel, gridBagConstraints);

        orderNumberTextField.setEditable(false);
        orderNumberTextField.setBackground(new java.awt.Color(232, 231, 231));
        orderNumberTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        orderNumberTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(orderNumberTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(orderDateLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.orderDateLabel.text")); // NOI18N
        orderDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(orderDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(estimatedDateLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.estimatedDateLabel.text")); // NOI18N
        estimatedDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(estimatedDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(receiptDateLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.receiptDateLabel.text")); // NOI18N
        receiptDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(receiptDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(shippingCostsLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.shippingCostsLabel.text")); // NOI18N
        shippingCostsLabel.setMaximumSize(new java.awt.Dimension(90, 14));
        shippingCostsLabel.setMinimumSize(new java.awt.Dimension(90, 14));
        shippingCostsLabel.setPreferredSize(new java.awt.Dimension(90, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(shippingCostsLabel, gridBagConstraints);

        shippingCostsTextField.setEditable(false);
        shippingCostsTextField.setBackground(new java.awt.Color(232, 231, 231));
        shippingCostsTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        shippingCostsTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(shippingCostsTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(otherCostsLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.otherCostsLabel.text")); // NOI18N
        otherCostsLabel.setPreferredSize(new java.awt.Dimension(90, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(otherCostsLabel, gridBagConstraints);

        otherCostsTextField.setEditable(false);
        otherCostsTextField.setBackground(new java.awt.Color(232, 231, 231));
        otherCostsTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        otherCostsTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(otherCostsTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(discountLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.discountLabel.text")); // NOI18N
        discountLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(discountLabel, gridBagConstraints);

        discountTextField.setEditable(false);
        discountTextField.setBackground(new java.awt.Color(232, 231, 231));
        discountTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        discountTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(discountTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(orderStatusLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.orderStatusLabel.text")); // NOI18N
        orderStatusLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(orderStatusLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(supplierLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.supplierLabel.text")); // NOI18N
        supplierLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(supplierLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(responsibleLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.responsibleLabel.text")); // NOI18N
        responsibleLabel.setPreferredSize(new java.awt.Dimension(90, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(responsibleLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(warehouseLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.warehouseLabel.text")); // NOI18N
        warehouseLabel.setMaximumSize(new java.awt.Dimension(90, 14));
        warehouseLabel.setMinimumSize(new java.awt.Dimension(90, 14));
        warehouseLabel.setPreferredSize(new java.awt.Dimension(90, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(warehouseLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(totalLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.totalLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(totalLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(totalWithIVALabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.totalWithIVALabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(totalWithIVALabel, gridBagConstraints);

        totalTextField.setEditable(false);
        totalTextField.setBackground(new java.awt.Color(231, 231, 231));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(totalTextField, gridBagConstraints);

        totalWithIVATextField.setEditable(false);
        totalWithIVATextField.setBackground(new java.awt.Color(231, 231, 231));
        totalWithIVATextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalWithIVATextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(totalWithIVATextField, gridBagConstraints);

        responsibleTextField.setEditable(false);
        responsibleTextField.setBackground(new java.awt.Color(232, 231, 231));
        responsibleTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        responsibleTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(responsibleTextField, gridBagConstraints);

        supplierTextField.setEditable(false);
        supplierTextField.setBackground(new java.awt.Color(232, 231, 231));
        supplierTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        supplierTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(supplierTextField, gridBagConstraints);

        statusTextField.setEditable(false);
        statusTextField.setBackground(new java.awt.Color(232, 231, 231));
        statusTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        statusTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(statusTextField, gridBagConstraints);

        receiptDateTextField.setEditable(false);
        receiptDateTextField.setBackground(new java.awt.Color(232, 231, 231));
        receiptDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        receiptDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(receiptDateTextField, gridBagConstraints);

        estimatedDateTextField.setEditable(false);
        estimatedDateTextField.setBackground(new java.awt.Color(232, 231, 231));
        estimatedDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        estimatedDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(estimatedDateTextField, gridBagConstraints);

        orderDateTextField.setEditable(false);
        orderDateTextField.setBackground(new java.awt.Color(232, 231, 231));
        orderDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        orderDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(orderDateTextField, gridBagConstraints);

        warehouseTextField.setEditable(false);
        warehouseTextField.setBackground(new java.awt.Color(232, 231, 231));
        warehouseTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        warehouseTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(warehouseTextField, gridBagConstraints);

        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/stock/icons/printer.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(printButton, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.printButton.text")); // NOI18N
        printButton.setEnabled(false);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel1.add(printButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        mainGeneralPanel.add(generalPanel1, gridBagConstraints);

        notesPanel1.setLayout(new java.awt.GridBagLayout());

        notesLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        notesLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(notesLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.notesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        notesPanel1.add(notesLabel, gridBagConstraints);

        notesTextArea.setEditable(false);
        notesTextArea.setBackground(new java.awt.Color(231, 231, 231));
        notesTextArea.setColumns(20);
        notesTextArea.setRows(5);
        notesScrollPane.setViewportView(notesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        notesPanel1.add(notesScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        mainGeneralPanel.add(notesPanel1, gridBagConstraints);

        mainScrollPane1.setViewportView(mainGeneralPanel);

        mainTabbedPane.addTab(org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.mainScrollPane1.TabConstraints.tabTitle"), mainScrollPane1); // NOI18N

        partsScrollPane.setBorder(null);

        partsPanel.setLayout(new java.awt.GridBagLayout());

        partsLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        partsLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(partsLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.partsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        partsPanel.add(partsLabel, gridBagConstraints);

        piecesPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        piecesPanel.setPreferredSize(new java.awt.Dimension(200, 200));

        partsTable.setAutoCreateRowSorter(true);
        partsTable.setBackground(new java.awt.Color(231, 231, 231));
        partsTable.setFillsViewportHeight(true);
        partsTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        partsTable.setRowHeight(25);
        partsTable.setSelectionBackground(new java.awt.Color(186, 216, 247));
        piecesPanel.setViewportView(partsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        partsPanel.add(piecesPanel, gridBagConstraints);

        bottomPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(partsTotalLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.partsTotalLabel.text")); // NOI18N
        partsTotalLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bottomPanel.add(partsTotalLabel, gridBagConstraints);

        partsTotalTextField.setEditable(false);
        partsTotalTextField.setText(org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.partsTotalTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bottomPanel.add(partsTotalTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(partsTotalWithIVALabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.partsTotalWithIVALabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bottomPanel.add(partsTotalWithIVALabel, gridBagConstraints);

        partsTotalWithIVATextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        bottomPanel.add(partsTotalWithIVATextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        partsPanel.add(bottomPanel, gridBagConstraints);

        partsScrollPane.setViewportView(partsPanel);

        mainTabbedPane.addTab(org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.partsScrollPane.TabConstraints.tabTitle"), partsScrollPane); // NOI18N

        invoiceScrollPane.setBorder(null);

        invoicePanel.setLayout(new java.awt.GridBagLayout());

        invoiceGeneralPanel.setLayout(new java.awt.GridBagLayout());

        invoiceLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        invoiceLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(invoiceLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        invoiceGeneralPanel.add(invoiceLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceNumberLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceNumberLabel.text")); // NOI18N
        invoiceNumberLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceNumberLabel, gridBagConstraints);

        invoiceNumberTextField.setEditable(false);
        invoiceNumberTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceNumberTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceNumberTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceNumberTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceDateLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceDateLabel.text")); // NOI18N
        invoiceDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceAcceptedDateLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceAcceptedDateLabel.text")); // NOI18N
        invoiceAcceptedDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceAcceptedDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceEstimatedPaymentDateLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceEstimatedPaymentDateLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceEstimatedPaymentDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoicePaymentDateLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoicePaymentDateLabel.text")); // NOI18N
        invoicePaymentDateLabel.setMaximumSize(new java.awt.Dimension(90, 14));
        invoicePaymentDateLabel.setMinimumSize(new java.awt.Dimension(90, 14));
        invoicePaymentDateLabel.setPreferredSize(new java.awt.Dimension(90, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoicePaymentDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoicePaymentMethodLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoicePaymentMethodLabel.text")); // NOI18N
        invoicePaymentMethodLabel.setPreferredSize(new java.awt.Dimension(118, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoicePaymentMethodLabel, gridBagConstraints);

        invoicePaymentMethodTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoicePaymentMethodTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoicePaymentMethodTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoicePaymentMethodTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceStatusLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceStatusLabel.text")); // NOI18N
        invoiceStatusLabel.setPreferredSize(new java.awt.Dimension(90, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceStatusLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceResponsibleLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceResponsibleLabel.text")); // NOI18N
        invoiceResponsibleLabel.setMaximumSize(new java.awt.Dimension(90, 14));
        invoiceResponsibleLabel.setMinimumSize(new java.awt.Dimension(90, 14));
        invoiceResponsibleLabel.setPreferredSize(new java.awt.Dimension(90, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceResponsibleLabel, gridBagConstraints);

        invoicePaymentDateTextField.setEditable(false);
        invoicePaymentDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoicePaymentDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoicePaymentDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoicePaymentDateTextField, gridBagConstraints);

        invoiceEstimatedPaymentDateTextField.setEditable(false);
        invoiceEstimatedPaymentDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceEstimatedPaymentDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceEstimatedPaymentDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceEstimatedPaymentDateTextField, gridBagConstraints);

        invoiceAcceptedDateTextField.setEditable(false);
        invoiceAcceptedDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceAcceptedDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceAcceptedDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceAcceptedDateTextField, gridBagConstraints);

        invoiceDateTextField.setEditable(false);
        invoiceDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceDateTextField, gridBagConstraints);

        invoiceStatusTextField.setEditable(false);
        invoiceStatusTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceStatusTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceStatusTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceStatusTextField, gridBagConstraints);

        invoiceResponsibleTextField.setEditable(false);
        invoiceResponsibleTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceResponsibleTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceResponsibleTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(invoiceResponsibleTextField, gridBagConstraints);

        printInvoiceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/stock/icons/printer.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(printInvoiceButton, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.printInvoiceButton.text")); // NOI18N
        printInvoiceButton.setEnabled(false);
        printInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printInvoiceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceGeneralPanel.add(printInvoiceButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        invoicePanel.add(invoiceGeneralPanel, gridBagConstraints);

        invoiceNotesPanel.setLayout(new java.awt.GridBagLayout());

        invoiceNotesLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        invoiceNotesLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(invoiceNotesLabel, org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceNotesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        invoiceNotesPanel.add(invoiceNotesLabel, gridBagConstraints);

        invoiceNotesTextArea.setEditable(false);
        invoiceNotesTextArea.setBackground(new java.awt.Color(231, 231, 231));
        invoiceNotesTextArea.setColumns(20);
        invoiceNotesTextArea.setRows(5);
        invoiceNotesScrollPane.setViewportView(invoiceNotesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceNotesPanel.add(invoiceNotesScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        invoicePanel.add(invoiceNotesPanel, gridBagConstraints);

        invoiceScrollPane.setViewportView(invoicePanel);

        mainTabbedPane.addTab(org.openide.util.NbBundle.getMessage(PartOrderDetailedViewTopComponent.class, "PartOrderDetailedViewTopComponent.invoiceScrollPane.TabConstraints.tabTitle"), invoiceScrollPane); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(mainTabbedPane, gridBagConstraints);

        mainScrollPane.setViewportView(mainPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(mainScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void totalWithIVATextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalWithIVATextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalWithIVATextFieldActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected void done() {
            }

            @Override
            protected Void doInBackground() {
                ReportPrinter printer = new ReportPrinter();
                printer.printPartOrder(partOrder);
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_printButtonActionPerformed

    private void printInvoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInvoiceButtonActionPerformed
        final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected void done() {
            }

            @Override
            protected Void doInBackground() {
                ReportPrinter printer = new ReportPrinter();
                printer.printPartOrderInvoice(partOrder.getInvoice());
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_printInvoiceButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JTextField discountTextField;
    private javax.swing.JLabel estimatedDateLabel;
    private javax.swing.JTextField estimatedDateTextField;
    private javax.swing.JLabel generalLabel;
    private javax.swing.JPanel generalPanel1;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel invoiceAcceptedDateLabel;
    private javax.swing.JTextField invoiceAcceptedDateTextField;
    private javax.swing.JLabel invoiceDateLabel;
    private javax.swing.JTextField invoiceDateTextField;
    private javax.swing.JLabel invoiceEstimatedPaymentDateLabel;
    private javax.swing.JTextField invoiceEstimatedPaymentDateTextField;
    private javax.swing.JPanel invoiceGeneralPanel;
    private javax.swing.JLabel invoiceLabel;
    private javax.swing.JLabel invoiceNotesLabel;
    private javax.swing.JPanel invoiceNotesPanel;
    private javax.swing.JScrollPane invoiceNotesScrollPane;
    private javax.swing.JTextArea invoiceNotesTextArea;
    private javax.swing.JLabel invoiceNumberLabel;
    private javax.swing.JTextField invoiceNumberTextField;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JLabel invoicePaymentDateLabel;
    private javax.swing.JTextField invoicePaymentDateTextField;
    private javax.swing.JLabel invoicePaymentMethodLabel;
    private javax.swing.JTextField invoicePaymentMethodTextField;
    private javax.swing.JLabel invoiceResponsibleLabel;
    private javax.swing.JTextField invoiceResponsibleTextField;
    private javax.swing.JScrollPane invoiceScrollPane;
    private javax.swing.JLabel invoiceStatusLabel;
    private javax.swing.JTextField invoiceStatusTextField;
    private javax.swing.JPanel mainGeneralPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JScrollPane mainScrollPane1;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JPanel notesPanel1;
    private javax.swing.JScrollPane notesScrollPane;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JLabel orderDateLabel;
    private javax.swing.JTextField orderDateTextField;
    private javax.swing.JLabel orderNumberLabel;
    private javax.swing.JTextField orderNumberTextField;
    private javax.swing.JLabel orderStatusLabel;
    private javax.swing.JLabel otherCostsLabel;
    private javax.swing.JTextField otherCostsTextField;
    private javax.swing.JLabel partsLabel;
    private javax.swing.JPanel partsPanel;
    private javax.swing.JScrollPane partsScrollPane;
    private javax.swing.JTable partsTable;
    private javax.swing.JLabel partsTotalLabel;
    private javax.swing.JTextField partsTotalTextField;
    private javax.swing.JLabel partsTotalWithIVALabel;
    private javax.swing.JTextField partsTotalWithIVATextField;
    private javax.swing.JScrollPane piecesPanel;
    private javax.swing.JButton printButton;
    private javax.swing.JButton printInvoiceButton;
    private javax.swing.JLabel receiptDateLabel;
    private javax.swing.JTextField receiptDateTextField;
    private javax.swing.JLabel responsibleLabel;
    private javax.swing.JTextField responsibleTextField;
    private javax.swing.JLabel shippingCostsLabel;
    private javax.swing.JTextField shippingCostsTextField;
    private javax.swing.JTextField statusTextField;
    private javax.swing.JLabel supplierLabel;
    private javax.swing.JTextField supplierTextField;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JTextField totalTextField;
    private javax.swing.JLabel totalWithIVALabel;
    private javax.swing.JTextField totalWithIVATextField;
    private javax.swing.JLabel warehouseLabel;
    private javax.swing.JTextField warehouseTextField;
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public HelpCtx getHelpCtx() {
        //HelpCtx ctx = new HelpCtx("sdk.scene_explorer");
        //this call is for single components:
        return new HelpCtx("es.regueiro.easyrepair.ui.stock.detailed");
    }

    @Override
    public void componentOpened() {
        result = PartOrderLookup.getDefault().lookupResult(PartOrder.class);
        result.addLookupListener(this);

        fillData();

    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    @Override
    public void resultChanged(LookupEvent event) {
        fillData();
    }

    private String formatCurrency(String amount) {
        String text = "";
        if (NbPreferences.root().getBoolean("inFront", false)) {
            text += NbPreferences.root().get("currency", " €");
        }
        text += amount;
        if (NbPreferences.root().getBoolean("inFront", false)) {
        } else {
            text += NbPreferences.root().get("currency", " €");
        }
        return text;
    }

    private String formatWithIVA(BigDecimal price) {
        BigDecimal iva = new BigDecimal(NbPreferences.root().get("iva", "21")).divide(new BigDecimal("100"));

        BigDecimal total = price.add(price.multiply(iva));

        return formatCurrency(total.setScale(2, RoundingMode.HALF_UP).toPlainString());
    }

    private String formatWithoutIVA(BigDecimal price) {
        return formatCurrency(price.setScale(2, RoundingMode.HALF_UP).toPlainString());
    }

    private void fillData() {
        Collection<? extends PartOrder> partCol = result.allInstances();
        if (!partCol.isEmpty()) {
            PartOrder tempart = partCol.iterator().next();
            if (partOrder != tempart) {
                partOrder = tempart;
                clearGeneral();
                clearPartsListTable();
                clearInvoice();

                if (partOrder != null && partOrder.getId() != null) {
                    idTextField.setText(partOrder.getId().toString());
                    if (partOrder.getOrderNumber() != null) {
                        orderNumberTextField.setText(partOrder.getOrderNumber());
                    }
                    if (partOrder.getOrderDate() != null) {
                        orderDateTextField.setText(partOrder.getOrderDate().toString());
                    }
                    if (partOrder.getEstimatedDate() != null) {
                        estimatedDateTextField.setText(partOrder.getEstimatedDate().toString());
                    }
                    if (partOrder.getReceiptDate() != null) {
                        receiptDateTextField.setText(partOrder.getReceiptDate().toString());
                    }
                    if (partOrder.getShippingCosts() != null) {
                        shippingCostsTextField.setText(partOrder.getShippingCosts().toPlainString());
                    }
                    if (partOrder.getOtherCosts() != null) {
                        otherCostsTextField.setText(partOrder.getOtherCosts().toPlainString());
                    }
                    if (partOrder.getDiscount() != null) {
                        discountTextField.setText(partOrder.getDiscount().toPlainString());
                    }
                    if (partOrder.getNotes() != null) {
                        notesTextArea.setText(partOrder.getNotes());
                    }

                    statusTextField.setText(partOrder.getStatus());

                    if (partOrder.getSupplier() != null) {
                        Supplier sup = partOrder.getSupplier();
                        String ret = String.format("%08d", sup.getId()) + " - " + sup.getName();
                        if (!sup.getEnabled()) {
                            ret = ret + " (" + java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/stock/Bundle").getString("DISABLED") + ")";
                        }
                        supplierTextField.setText(ret);
                    }


                    if (partOrder.getResponsible() != null) {
                        Employee emp = partOrder.getInvoice().getResponsible();
                        String ret = emp.getEmployeeId() + " - " + emp.getName();
                        if (emp.getSurname() != null) {
                            ret += " " + emp.getSurname();
                        }
                        if (emp.getOccupation() != null) {
                            ret += " - " + emp.getOccupation();
                        }
                        if (!emp.getEnabled()) {
                            ret = ret + " (" + java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/stock/Bundle").getString("DISABLED") + ")";
                        }
                        responsibleTextField.setText(ret);
                    }

                    if (partOrder.getShippingWarehouse() != null) {

                        Warehouse war = partOrder.getShippingWarehouse();
                        String ret = String.format("%04d", war.getId()) + " - " + war.getName();
                        if (!war.getEnabled()) {
                            ret = ret + " (" + java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/stock/Bundle").getString("DISABLED") + ")";
                        }
                        warehouseTextField.setText(ret);
                    }





                    fillPartsList();

                    if (partOrder.getInvoice() != null) {
                        if (partOrder.getInvoice().getInvoiceNumber() != null) {
                            invoiceNumberTextField.setText(partOrder.getInvoice().getInvoiceNumber());
                        }
                        if (partOrder.getInvoice().getInvoiceDate() != null) {
                            invoiceDateTextField.setText(partOrder.getInvoice().getInvoiceDate().toString());
                        }
                        if (partOrder.getInvoice().getAcceptedDate() != null) {
                            invoiceAcceptedDateTextField.setText(partOrder.getInvoice().getAcceptedDate().toString());
                        }
                        if (partOrder.getInvoice().getEstimatedPaymentDate() != null) {
                            invoiceEstimatedPaymentDateTextField.setText(partOrder.getInvoice().getEstimatedPaymentDate().toString());
                        }
                        if (partOrder.getInvoice().getPaymentDate() != null) {
                            invoicePaymentDateTextField.setText(partOrder.getInvoice().getPaymentDate().toString());
                        }
                        if (partOrder.getInvoice().getPaymentMethod() != null) {
                            invoicePaymentMethodTextField.setText(partOrder.getInvoice().getPaymentMethod());
                        }
                        if (partOrder.getInvoice().getNotes() != null) {
                            invoiceNotesTextArea.setText(partOrder.getInvoice().getNotes());
                        }
                        invoiceStatusTextField.setText(partOrder.getStatus());

                        if (partOrder.getInvoice().getResponsible() != null) {
                            Employee emp = partOrder.getInvoice().getResponsible();
                            String ret = emp.getEmployeeId() + " - " + emp.getName();
                            if (emp.getSurname() != null) {
                                ret += " " + emp.getSurname();
                            }
                            if (emp.getOccupation() != null) {
                                ret += " - " + emp.getOccupation();
                            }
                            if (!emp.getEnabled()) {
                                ret = ret + " (" + java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/stock/Bundle").getString("DISABLED") + ")";
                            }
                            invoiceResponsibleTextField.setText(ret);
                        }
                    }

                }
                printButton.setEnabled(true);
                printInvoiceButton.setEnabled(true);
            }
        } else {
//            clear();
        }


    }

    private void calculateTotal() {
        BigDecimal discount;
        BigDecimal otherCosts;
        BigDecimal shippingCosts;



        if (!StringUtils.isBlank(discountTextField.getText())) {
            try {
                discount = new BigDecimal(discountTextField.getText());
            } catch (NumberFormatException e) {
                discount = new BigDecimal("0");
            }
        } else {
            discount = new BigDecimal("0");
        }
        if (!StringUtils.isBlank(otherCostsTextField.getText())) {
            try {
                otherCosts = new BigDecimal(otherCostsTextField.getText());
            } catch (NumberFormatException e) {
                otherCosts = new BigDecimal("0");
            }
        } else {
            otherCosts = new BigDecimal("0");
        }
        if (!StringUtils.isBlank(shippingCostsTextField.getText())) {
            try {
                shippingCosts = new BigDecimal(shippingCostsTextField.getText());
            } catch (NumberFormatException e) {
                shippingCosts = new BigDecimal("0");
            }
        } else {
            shippingCosts = new BigDecimal("0");
        }
        BigDecimal totalDiscount = new BigDecimal("1").subtract(discount.divide(new BigDecimal("100")));
        BigDecimal iva = new BigDecimal(NbPreferences.root().get("iva", "21")).divide(new BigDecimal("100"));

        BigDecimal total = (partsTotal.add(otherCosts).add(shippingCosts)).multiply(totalDiscount);

        totalTextField.setText(formatCurrency(total.setScale(2, RoundingMode.HALF_UP).toPlainString()));
        totalWithIVATextField.setText(formatCurrency(total.add(total.multiply(iva)).setScale(2, RoundingMode.HALF_UP).toPlainString()));

    }

    private void fillPartsList() {
        if (partOrder.getPartsList() != null && !partOrder.getPartsList().isEmpty()) {
            partsListModel.fill(partOrder.getPartsList());
        } else {
            partsListModel.fill(null);
        }

        partsTotal = new BigDecimal("0");

        if (partsListModel.getRowCount() > 0) {
            List<PartLine> partsL = partsListModel.getPartLineList();
            for (PartLine p : partsL) {
                BigDecimal partPrice = p.getPart().getPrice().multiply(new BigDecimal(p.getQuantity()));
                BigDecimal partDiscount = new BigDecimal("1").subtract(p.getDiscount().divide(new BigDecimal("100")));

                partsTotal = partsTotal.add(partPrice.multiply(partDiscount));
            }

        }

        partsTotalTextField.setText(formatCurrency(partsTotal.setScale(2, RoundingMode.HALF_UP).toPlainString()));

        BigDecimal iva = new BigDecimal(NbPreferences.root().get("iva", "21")).divide(new BigDecimal("100"));
        partsTotalWithIVATextField.setText(formatCurrency(partsTotal.add(partsTotal.multiply(iva)).setScale(2, RoundingMode.HALF_UP).toPlainString()));

        calculateTotal();
    }

    private void clearGeneral() {
        idTextField.setText("");
        orderNumberTextField.setText("");
        orderDateTextField.setText("");
        estimatedDateTextField.setText("");
        receiptDateTextField.setText("");
        shippingCostsTextField.setText("");
        otherCostsTextField.setText("");
        discountTextField.setText("");
        notesTextArea.setText("");
        statusTextField.setText("");
        supplierTextField.setText("");
        responsibleTextField.setText("");
        warehouseTextField.setText("");

        printButton.setEnabled(false);
        printInvoiceButton.setEnabled(false);
    }

    private void clearInvoice() {
        invoiceNumberTextField.setText("");
        invoiceDateTextField.setText("");
        invoiceAcceptedDateTextField.setText("");
        invoiceEstimatedPaymentDateTextField.setText("");
        invoicePaymentDateTextField.setText("");
        invoicePaymentMethodTextField.setText("");
        invoiceNotesTextArea.setText("");
        invoiceStatusTextField.setText("");
        invoiceResponsibleTextField.setText("");
    }

    private void clearPartsListTable() {
        partsListModel.clear();
    }

    public void viewInvoice(Invoice invoice) {
        if (partOrder != null && invoice != null && partOrder.getInvoice().equals(invoice)) {
            mainTabbedPane.setSelectedIndex(2);
        }
    }
}
