package es.regueiro.easyrepair.ui.repair;

import es.regueiro.easyrepair.login.SecurityManager;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import es.regueiro.easyrepair.api.repair.controller.LabourController;
import es.regueiro.easyrepair.model.repair.Labour;
import es.regueiro.easyrepair.model.user.Privilege;
import es.regueiro.easyrepair.reports.ReportPrinter;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Collection;
import java.util.concurrent.ExecutionException;
import javax.swing.ActionMap;
import javax.swing.SwingWorker;
import javax.swing.event.*;
import javax.swing.text.DefaultEditorKit;
import org.apache.commons.lang3.StringUtils;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.*;
import org.openide.util.*;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//es.regueiro.easyrepair.ui.repair//LabourEditor//EN",
autostore = false)
@TopComponent.Description(iconBase = "es/regueiro/easyrepair/ui/repair/icons/labour_edit.png", preferredID = "LabourEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(position = 13, mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "es.regueiro.easyrepair.ui.repair.LabourEditorTopComponent")
@TopComponent.OpenActionRegistration(displayName = "#CTL_LabourEditorAction",
preferredID = "LabourEditorTopComponent")
@Messages({
    "CTL_LabourEditorAction=Editor de mano de obra",
    "CTL_LabourEditorTopComponent=Editor de mano de obra",
    "HINT_LabourEditorTopComponent=Esta es una ventana del editor de mano de obra"
})
public final class LabourEditorTopComponent extends TopComponent implements LookupListener, DocumentListener {

    private Labour labour = null;
    private Lookup.Result<Labour> result;
    private InstanceContent content = new InstanceContent();
    private UndoRedo.Manager manager = new UndoRedo.Manager();
    private LabourController controller = Lookup.getDefault().lookup(LabourController.class);
    private boolean modified = false;
    private boolean newLabour = true;
    private boolean invalid = false;

    public LabourEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_LabourEditorTopComponent());
        setToolTipText(Bundle.HINT_LabourEditorTopComponent());
        this.setFocusable(true);
        associateLookup(new AbstractLookup(content));
        ActionMap actionMap = getActionMap();
        actionMap.put(DefaultEditorKit.copyAction, new DefaultEditorKit.CopyAction());
        actionMap.put(DefaultEditorKit.cutAction, new DefaultEditorKit.CutAction());
        actionMap.put(DefaultEditorKit.pasteAction, new DefaultEditorKit.PasteAction());
        content.add(actionMap);




        nameTextField.setDocument(new MaxLengthTextDocument(100));
        descriptionTextField.setDocument(new MaxLengthTextDocument(100));
        priceTextField.setDocument(new MaxLengthTextDocument(12));


        setupUndo();

        nameTextField.getDocument().addDocumentListener(this);
        descriptionTextField.getDocument().addDocumentListener(this);
        priceTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                calculatePriceWithIVA();
                modify();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                calculatePriceWithIVA();
                modify();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                calculatePriceWithIVA();
                modify();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainGeneralPanel = new javax.swing.JPanel();
        generalPanel = new javax.swing.JPanel();
        generalLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        descriptionTextField = new javax.swing.JTextField();
        priceLabel = new javax.swing.JLabel();
        priceTextField = new javax.swing.JTextField();
        pricewithIVALabel = new javax.swing.JLabel();
        pricewithIVATextField = new javax.swing.JTextField();
        notesPanel = new javax.swing.JPanel();
        notesLabel = new javax.swing.JLabel();
        notesScrollPane = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        topToolBar = new javax.swing.JToolBar();
        saveLabourButton = new javax.swing.JButton();
        reloadLabourButton = new javax.swing.JButton();
        enableLabourButton = new javax.swing.JButton();
        disableLabourButton = new javax.swing.JButton();
        deleteLabourButton = new javax.swing.JButton();
        printLabourButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        mainGeneralPanel.setLayout(new java.awt.GridBagLayout());

        generalPanel.setLayout(new java.awt.GridBagLayout());

        generalLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        generalLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(generalLabel, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.generalLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        generalPanel.add(generalLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(idLabel, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.idLabel.text")); // NOI18N
        idLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(idLabel, gridBagConstraints);

        idTextField.setBackground(new java.awt.Color(232, 231, 231));
        idTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(idTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.nameLabel.text")); // NOI18N
        nameLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nameLabel, gridBagConstraints);

        nameTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        nameTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nameTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(descriptionLabel, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.descriptionLabel.text")); // NOI18N
        descriptionLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(descriptionLabel, gridBagConstraints);

        descriptionTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        descriptionTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(descriptionTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(priceLabel, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.priceLabel.text")); // NOI18N
        priceLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(priceLabel, gridBagConstraints);

        priceTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        priceTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(priceTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(pricewithIVALabel, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.pricewithIVALabel.text")); // NOI18N
        pricewithIVALabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(pricewithIVALabel, gridBagConstraints);

        pricewithIVATextField.setEditable(false);
        pricewithIVATextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        pricewithIVATextField.setMinimumSize(new java.awt.Dimension(180, 20));
        pricewithIVATextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(pricewithIVATextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        mainGeneralPanel.add(generalPanel, gridBagConstraints);

        notesPanel.setLayout(new java.awt.GridBagLayout());

        notesLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        notesLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(notesLabel, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.notesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        notesPanel.add(notesLabel, gridBagConstraints);

        notesTextArea.setColumns(20);
        notesTextArea.setRows(5);
        notesScrollPane.setViewportView(notesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        notesPanel.add(notesScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        mainGeneralPanel.add(notesPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(mainGeneralPanel, gridBagConstraints);

        topToolBar.setBorder(null);
        topToolBar.setFloatable(false);
        topToolBar.setRollover(true);

        saveLabourButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/disk.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(saveLabourButton, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.saveLabourButton.text")); // NOI18N
        saveLabourButton.setFocusable(false);
        saveLabourButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        saveLabourButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        saveLabourButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        saveLabourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLabourButtonActionPerformed(evt);
            }
        });
        topToolBar.add(saveLabourButton);

        reloadLabourButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/arrow_refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(reloadLabourButton, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.reloadLabourButton.text")); // NOI18N
        reloadLabourButton.setFocusable(false);
        reloadLabourButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        reloadLabourButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        reloadLabourButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        reloadLabourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadLabourButtonActionPerformed(evt);
            }
        });
        topToolBar.add(reloadLabourButton);

        enableLabourButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/status_online.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(enableLabourButton, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.enableLabourButton.text")); // NOI18N
        enableLabourButton.setFocusable(false);
        enableLabourButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        enableLabourButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        enableLabourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableLabourButtonActionPerformed(evt);
            }
        });
        topToolBar.add(enableLabourButton);

        disableLabourButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/status_offline.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(disableLabourButton, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.disableLabourButton.text")); // NOI18N
        disableLabourButton.setFocusable(false);
        disableLabourButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        disableLabourButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        disableLabourButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        disableLabourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableLabourButtonActionPerformed(evt);
            }
        });
        topToolBar.add(disableLabourButton);

        deleteLabourButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/cross.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteLabourButton, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.deleteLabourButton.text")); // NOI18N
        deleteLabourButton.setFocusable(false);
        deleteLabourButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        deleteLabourButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        deleteLabourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLabourButtonActionPerformed(evt);
            }
        });
        topToolBar.add(deleteLabourButton);

        printLabourButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/printer.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(printLabourButton, org.openide.util.NbBundle.getMessage(LabourEditorTopComponent.class, "LabourEditorTopComponent.printLabourButton.text")); // NOI18N
        printLabourButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        printLabourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printLabourButtonActionPerformed(evt);
            }
        });
        topToolBar.add(printLabourButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(topToolBar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void saveLabourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLabourButtonActionPerformed
        saveLabour();
    }//GEN-LAST:event_saveLabourButtonActionPerformed

    private void disableLabourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableLabourButtonActionPerformed
        final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected void done() {
//                disableLabourButton.setVisible(false);
//                enableLabourButton.setVisible(true);
                fillData();
                StatusDisplayer.getDefault().setStatusText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("DISABLED_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")));
            }

            @Override
            protected Void doInBackground() {
                if (updateLabour()) {
                    labour = controller.disableLabour();
                }
                return null;
            }
        };

        worker.execute();

    }//GEN-LAST:event_disableLabourButtonActionPerformed

    private void reloadLabourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadLabourButtonActionPerformed
        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("SURE_RELOAD_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")),
                java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("RELOAD"), NotifyDescriptor.YES_NO_OPTION);

        Object retval = DialogDisplayer.getDefault().notify(d);

        if (retval == NotifyDescriptor.YES_OPTION) {
            final SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
                @Override
                protected void done() {
                    modified = false;
                    invalid = false;
                    try {
                        if (get()) {
                            fillData();
                        } else {
                            NotifyDescriptor d = new NotifyDescriptor.Message(
                                    java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR_RELOAD_NOT_FOUND"),
                                    NotifyDescriptor.ERROR_MESSAGE);
                            Object retval = DialogDisplayer.getDefault().notify(d);
                        }
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    } catch (ExecutionException e) {
                        throw new RuntimeException(e);
                    }
                    StatusDisplayer.getDefault().setStatusText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("RELOADED_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")));
                }

                @Override
                protected Boolean doInBackground() {
                    labour = controller.reloadLabour();
                    if (labour != null) {
                        controller.setLabour(labour);
                        return true;
                    } else {
                        return false;
                    }
                }
            };


            worker.execute();

        }
    }//GEN-LAST:event_reloadLabourButtonActionPerformed

    private void enableLabourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableLabourButtonActionPerformed
        final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected void done() {
//                disableLabourButton.setVisible(true);
//                enableLabourButton.setVisible(false);
                fillData();
                StatusDisplayer.getDefault().setStatusText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("ENABLED_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")));
            }

            @Override
            protected Void doInBackground() {
                if (updateLabour()) {
                    labour = controller.enableLabour();
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_enableLabourButtonActionPerformed

    private void deleteLabourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLabourButtonActionPerformed
        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("SURE_DELETE_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")),
                java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("DELETE"), NotifyDescriptor.YES_NO_OPTION);

        Object retval = DialogDisplayer.getDefault().notify(d);

        if (retval == NotifyDescriptor.YES_OPTION) {


            LabourLookup.getDefault().clear();

            LabourBrowserTopComponent window = (LabourBrowserTopComponent) WindowManager.getDefault().findTopComponent("LabourBrowserTopComponent");

            window.deleteLabour(labour);
            final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                protected void done() {
                    forceClose();
                    StatusDisplayer.getDefault().setStatusText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("X_DELETED"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")));
                }

                @Override
                protected Void doInBackground() {
                    controller.setLabour(labour);
                    controller.deleteLabour();
                    return null;
                }
            };


            worker.execute();

        }
    }//GEN-LAST:event_deleteLabourButtonActionPerformed

    private void printLabourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printLabourButtonActionPerformed
        if (updateLabour()) {
            final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                protected void done() {
                }

                @Override
                protected Void doInBackground() {
                    ReportPrinter printer = new ReportPrinter();
                    printer.printLabour(labour);
                    return null;
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_printLabourButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteLabourButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JButton disableLabourButton;
    private javax.swing.JButton enableLabourButton;
    private javax.swing.JLabel generalLabel;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JPanel mainGeneralPanel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JScrollPane notesScrollPane;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JLabel pricewithIVALabel;
    private javax.swing.JTextField pricewithIVATextField;
    private javax.swing.JButton printLabourButton;
    private javax.swing.JButton reloadLabourButton;
    private javax.swing.JButton saveLabourButton;
    private javax.swing.JToolBar topToolBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public HelpCtx getHelpCtx() {
        //HelpCtx ctx = new HelpCtx("sdk.scene_explorer");
        //this call is for single components:
        return new HelpCtx("es.regueiro.easyrepair.ui.repair.editor.labour");
    }

    public Labour getLabour() {
        //HelpCtx ctx = new HelpCtx("sdk.scene_explorer");
        //this call is for single components:
        return labour;
    }

    public void forceClose() {
        modified = false;
        this.close();
    }

    @Override
    public void componentOpened() {
        invalid = false;
        result = LabourLookup.getDefault().lookupResult(Labour.class);
        result.removeLookupListener(this);

        Collection<? extends Labour> labourColId = result.allInstances();
        if (!labourColId.isEmpty()) {
            labour = controller.getLabourById(labourColId.iterator().next().getId());
            if (labour == null) {
                NotifyDescriptor d = new NotifyDescriptor.Message(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("X_NOT_FOUND"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")), NotifyDescriptor.ERROR_MESSAGE);
                Object retval = DialogDisplayer.getDefault().notify(d);
                close();
            } else {
                newLabour = false;
            }
        } else {
            labour = controller.newLabour();
            newLabour = true;
        }
        if (labour != null) {
            reloadLabourButton.setEnabled(!newLabour);
            deleteLabourButton.setEnabled(!newLabour);
            enableLabourButton.setVisible(false);
            disableLabourButton.setEnabled(!newLabour);
            controller.setLabour(labour);
            fillData();
            StatusDisplayer.getDefault().setStatusText("");
        }

    }

    @Override
    public void componentClosed() {
        manager.discardAllEdits();
    }

    @Override
    public void componentActivated() {
        checkPermissions();
    }

    @Override
    public boolean canClose() {
        if (modified) {
            NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                    java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("CHANGES_WILL_BE_LOST"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")),
                    java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("CLOSE"), NotifyDescriptor.YES_NO_OPTION);

            Object retval = DialogDisplayer.getDefault().notify(d);

            if (retval == NotifyDescriptor.YES_OPTION) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return manager;
    }

    private void checkPermissions() {
        if (!SecurityManager.getDefault().isUserLoggedIn() || !SecurityManager.getDefault().userHasPrivilege(Privilege.LABOUR_EDIT)) {
            this.forceClose();
        }
    }

    private void calculatePriceWithIVA() {
        BigDecimal price;
        BigDecimal iva = new BigDecimal(NbPreferences.root().get("iva", "21")).divide(new BigDecimal("100"));

        if (!StringUtils.isBlank(priceTextField.getText())) {
            try {
                price = new BigDecimal(priceTextField.getText());
            } catch (NumberFormatException e) {
                price = new BigDecimal("0");
            }
        } else {
            price = new BigDecimal("0");
        }

        pricewithIVATextField.setText(formatCurrency(price.add(price.multiply(iva)).setScale(2, RoundingMode.HALF_UP).toPlainString()));

    }

    private String formatCurrency(String amount) {
        String text = "";
        if (NbPreferences.root().getBoolean("inFront", false)) {
            text += NbPreferences.root().get("currency", " €");
        }
        text += amount;
        if (NbPreferences.root().getBoolean("inFront", false)) {
        } else {
            text += NbPreferences.root().get("currency", " €");
        }
        return text;
    }

    private void fillData() {
        if (!invalid) {
            clearGeneral();
            clearNotes();

            if (labour != null && labour.getId() != null) {
                idTextField.setText(labour.getId().toString());
                if (labour.getName() != null) {
                    nameTextField.setText(labour.getName());
                }
                if (labour.getDescription() != null) {
                    descriptionTextField.setText(labour.getDescription());
                }
                if (labour.getPrice() != null) {
                    priceTextField.setText(labour.getPrice().toPlainString());
                }
                if (labour.getNotes() != null) {
                    notesTextArea.setText(labour.getNotes());
                }
                if (labour.getEnabled()) {
                    enableLabourButton.setVisible(false);
                    disableLabourButton.setVisible(true);
                } else {
                    enableLabourButton.setVisible(true);
                    disableLabourButton.setVisible(false);
                }
            }

            manager.discardAllEdits();
            modified = invalid;
            saveLabourButton.setEnabled(modified);
            disableLabourButton.setEnabled(!newLabour);
            deleteLabourButton.setEnabled(!newLabour);
            reloadLabourButton.setEnabled(modified && !newLabour);
        }
    }

    private void clearGeneral() {
        idTextField.setText("");
        nameTextField.setText("");
        descriptionTextField.setText("");
        priceTextField.setText("");
    }

    private void clearNotes() {
        notesTextArea.setText("");
    }

    private void saveLabour() {
        if (updateLabour()) {
            final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                ProgressHandle p = ProgressHandleFactory.createHandle(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("SAVING"));

                @Override
                protected void done() {
                    fillData();
                    p.finish();
                }

                @Override
                protected Void doInBackground() {
                    p.start();
                    try {
                        controller.setLabour(labour);
                        controller.saveLabour();
                        newLabour = false;
                        invalid = false;
                    } catch (Exception e) {
                        if (e.getMessage().contains("was updated or deleted by another user")) {
                            NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                    java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("OVERWRITE_DIALOG"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")),
                                    java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("X_MODIFIED"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")));
                            String options[] = new String[2];
                            options[0] = java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("OVERWRITE");
                            options[1] = java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("RELOAD");
                            d.setOptions(options);
                            Object retval = DialogDisplayer.getDefault().notify(d);
                            if (retval.equals(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("OVERWRITE"))) {
                                controller.overwriteLabour();
                                labour = controller.getLabour();
                                invalid = false;
                            } else if (retval.equals(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("RELOAD"))) {
                                reloadLabourButton.doClick();
                            }
                        } else {
                            NotifyDescriptor d = new NotifyDescriptor.Message(e.getMessage(), NotifyDescriptor.ERROR_MESSAGE);
                            Object retval = DialogDisplayer.getDefault().notify(d);
                            System.out.println(e.toString());
                            invalid = true;
                        }
                    }
                    return null;
                }
            };

            worker.execute();
        }
    }

    private boolean updateLabour() {
        if (!StringUtils.isBlank(nameTextField.getText())) {
            labour.setName(nameTextField.getText());


            if (!StringUtils.isBlank(descriptionTextField.getText())) {
                labour.setDescription(descriptionTextField.getText());
            } else {
                labour.setDescription(null);
            }
            if (!StringUtils.isBlank(notesTextArea.getText())) {
                labour.setNotes(notesTextArea.getText());
            } else {
                labour.setNotes(null);
            }
            if (!StringUtils.isBlank(priceTextField.getText())) {
                try {
                    labour.setPrice(priceTextField.getText());
                } catch (IllegalArgumentException e) {
                    NotifyDescriptor d = new NotifyDescriptor.Message(e.getMessage(), NotifyDescriptor.ERROR_MESSAGE);
                    Object retval = DialogDisplayer.getDefault().notify(d);
                    invalid = true;
                    return false;
                }
            } else {
                labour.setPrice(null);
            }
            invalid = false;
            return true;
        } else {
            NotifyDescriptor d = new NotifyDescriptor.Message(
                    java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("X_NAME_NOT_BLANK"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/repair/Bundle").getString("LABOUR")), NotifyDescriptor.WARNING_MESSAGE);
            Object retval = DialogDisplayer.getDefault().notify(d);
            invalid = true;
            return false;
        }
    }

    private void setupUndo() {
        notesTextArea.getDocument().addUndoableEditListener(manager);
        descriptionTextField.getDocument().addUndoableEditListener(manager);
        priceTextField.getDocument().addUndoableEditListener(manager);
        //TODO add the rest of the textfields
    }

    private void removeUndo() {
        notesTextArea.getDocument().removeUndoableEditListener(manager);
        descriptionTextField.getDocument().removeUndoableEditListener(manager);
        priceTextField.getDocument().removeUndoableEditListener(manager);
    }

    private void modify() {
        modified = true;
        saveLabourButton.setEnabled(modified);
        reloadLabourButton.setEnabled(modified && !newLabour);

        StatusDisplayer.getDefault().setStatusText("");
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        modify();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        modify();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        modify();
    }
}
