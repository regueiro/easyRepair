package es.regueiro.easyrepair.ui.repair;

import es.regueiro.easyrepair.model.client.Vehicle;
import es.regueiro.easyrepair.model.repair.Estimate;
import es.regueiro.easyrepair.model.repair.LabourLine;
import es.regueiro.easyrepair.model.repair.RepairOrder;
import es.regueiro.easyrepair.model.shared.Invoice;
import es.regueiro.easyrepair.model.stock.PartLine;
import es.regueiro.easyrepair.reports.ReportPrinter;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Collection;
import java.util.List;
import javax.swing.SwingWorker;
import org.apache.commons.lang3.StringUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//es.regueiro.easyrepair.ui.repair//RepairOrderDetailedView//EN",
autostore = false)
@TopComponent.Description(iconBase = "es/regueiro/easyrepair/ui/repair/icons/toolbox_detailed.png", preferredID = "RepairOrderDetailedViewTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(position = 3, mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "es.regueiro.easyrepair.ui.repair.RepairOrderDetailedViewTopComponent")
@TopComponent.OpenActionRegistration(displayName = "#CTL_RepairOrderDetailedViewAction",
preferredID = "RepairOrderDetailedViewTopComponent")
@Messages({
    "CTL_RepairOrderDetailedViewAction=Vista detallada de reparaciones",
    "CTL_RepairOrderDetailedViewTopComponent=Vista detallada de reparaciones",
    "HINT_RepairOrderDetailedViewTopComponent=Esta es una ventana de la vista detallada de reparaciones"
})
public final class RepairOrderDetailedViewTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<RepairOrder> result = null;
    private RepairOrder repairOrder;
    private EstimatePartsViewTableModel partListModel = new EstimatePartsViewTableModel();
    private EstimateLabourViewTableModel labourListModel = new EstimateLabourViewTableModel();
    BigDecimal partsTotal = new BigDecimal("0");
    BigDecimal labourTotal = new BigDecimal("0");

    public RepairOrderDetailedViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_RepairOrderDetailedViewTopComponent());
        setToolTipText(Bundle.HINT_RepairOrderDetailedViewTopComponent());
        this.setFocusable(true);


        labourTable.setModel(labourListModel);
        partsTable.setModel(partListModel);

        for (int i = 0; i < partsTable.getColumnCount(); i++) {
            partsTable.getColumnModel().getColumn(i).setCellRenderer(new EstimatePartsTableCellRenderer());
        }
        for (int i = 0; i < labourTable.getColumnCount(); i++) {
            labourTable.getColumnModel().getColumn(i).setCellRenderer(new EstimateLabourTableCellRenderer());
        }


        mainTabbedPane.setIconAt(0, new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/toolbox.png")));
        mainTabbedPane.setIconAt(1, new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/estimate.png")));
        mainTabbedPane.setIconAt(2, new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/invoice.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        mainScrollPane1 = new javax.swing.JScrollPane();
        mainGeneralPanel = new javax.swing.JPanel();
        generalPanel = new javax.swing.JPanel();
        generalLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        orderNumberLabel = new javax.swing.JLabel();
        orderNumberTextField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        orderStatusLabel = new javax.swing.JLabel();
        vehicleLabel = new javax.swing.JLabel();
        kilometresLabel = new javax.swing.JLabel();
        kilometresTextField = new javax.swing.JTextField();
        gasTankLevelLabel = new javax.swing.JLabel();
        gasTankLevelTextField = new javax.swing.JTextField();
        orderDateLabel = new javax.swing.JLabel();
        estimatedDateLabel = new javax.swing.JLabel();
        finishDateLabel = new javax.swing.JLabel();
        deliveryDateLabel = new javax.swing.JLabel();
        responsibleLabel = new javax.swing.JLabel();
        vehicleTextField = new javax.swing.JTextField();
        orderDateTextField = new javax.swing.JTextField();
        orderStatusTextField = new javax.swing.JTextField();
        orderEstimatedDateTextField = new javax.swing.JTextField();
        orderFinishDateTextField = new javax.swing.JTextField();
        orderDeliveryDateTextField = new javax.swing.JTextField();
        orderResponsibleTextField = new javax.swing.JTextField();
        clientTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        clientLabel = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        notesPanel = new javax.swing.JPanel();
        notesLabel = new javax.swing.JLabel();
        notesScrollPane = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        estimateScrollPane = new javax.swing.JScrollPane();
        estimatePanel = new javax.swing.JPanel();
        estimateLabel = new javax.swing.JLabel();
        partsLabel = new javax.swing.JLabel();
        partsPanel = new javax.swing.JScrollPane();
        partsTable = new javax.swing.JTable();
        labourLabel = new javax.swing.JLabel();
        labourPanel = new javax.swing.JScrollPane();
        labourTable = new javax.swing.JTable();
        partsButtonsPanel = new javax.swing.JPanel();
        partsTotalLabel = new javax.swing.JLabel();
        partsTotalTextField = new javax.swing.JTextField();
        partsTotalWithIVALabel = new javax.swing.JLabel();
        partsTotalWithIVATextField = new javax.swing.JTextField();
        labourButtonsPanel = new javax.swing.JPanel();
        labourTotalLabel = new javax.swing.JLabel();
        labourTotalTextField = new javax.swing.JTextField();
        labourTotaWithIVALabel = new javax.swing.JLabel();
        labourTotalWithIVATextField = new javax.swing.JTextField();
        pricePanel = new javax.swing.JPanel();
        discountLabel = new javax.swing.JLabel();
        discountTextField = new javax.swing.JTextField();
        totalLabel = new javax.swing.JLabel();
        totalTextField = new javax.swing.JTextField();
        totalWithIVALabel = new javax.swing.JLabel();
        totalWithIVATextField = new javax.swing.JTextField();
        estimateNumberLabel = new javax.swing.JLabel();
        estimateNumberTextField = new javax.swing.JTextField();
        estimateDateLabel = new javax.swing.JLabel();
        estimateAcceptedDateLabel = new javax.swing.JLabel();
        estimateResponsibleLabel = new javax.swing.JLabel();
        estimateStatusLabel = new javax.swing.JLabel();
        estimateNotesScrollPane = new javax.swing.JScrollPane();
        estimateNotesTextArea = new javax.swing.JTextArea();
        estimateNotesLabel = new javax.swing.JLabel();
        estimateDateTextField = new javax.swing.JTextField();
        estimateAcceptedDateTextField = new javax.swing.JTextField();
        estimateStatusTextField = new javax.swing.JTextField();
        estimateResponsibleTextField = new javax.swing.JTextField();
        printEstimateButton = new javax.swing.JButton();
        invoiceScrollPane = new javax.swing.JScrollPane();
        invoicePanel = new javax.swing.JPanel();
        mainInvoicePanel = new javax.swing.JPanel();
        invoiceLabel = new javax.swing.JLabel();
        invoiceNumberLabel = new javax.swing.JLabel();
        invoiceNumberTextField = new javax.swing.JTextField();
        invoiceDateLabel = new javax.swing.JLabel();
        invoiceEstimatedPaymentDateLabel = new javax.swing.JLabel();
        invoicePaymentDateLabel = new javax.swing.JLabel();
        invoiceacceptedDateLabel = new javax.swing.JLabel();
        invoicePaymentMethodLabel = new javax.swing.JLabel();
        invoicePaymentMethodTextField = new javax.swing.JTextField();
        invoiceStatusLabel = new javax.swing.JLabel();
        invoiceResponsibleLabel = new javax.swing.JLabel();
        invoicePaymentResponsibleLabel = new javax.swing.JLabel();
        invoiceDateTextField = new javax.swing.JTextField();
        invoiceEstimatedPaymentDateTextField = new javax.swing.JTextField();
        invoicePaymentDateTextField = new javax.swing.JTextField();
        invoiceAcceptedDateTextField = new javax.swing.JTextField();
        invoicePaymentResponsibleTextField = new javax.swing.JTextField();
        invoiceStatusTextField = new javax.swing.JTextField();
        invoiceResponsibleTextField = new javax.swing.JTextField();
        printInvoiceButton = new javax.swing.JButton();
        invoiceNotesPanel = new javax.swing.JPanel();
        invoiceNotesLabel = new javax.swing.JLabel();
        invoiceNotesScrollPane = new javax.swing.JScrollPane();
        invoiceNotesTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        mainScrollPane.setBorder(null);
        mainScrollPane.setMinimumSize(new java.awt.Dimension(617, 22));

        mainPanel.setLayout(new java.awt.GridBagLayout());

        mainTabbedPane.setDoubleBuffered(true);

        mainScrollPane1.setBorder(null);

        mainGeneralPanel.setLayout(new java.awt.GridBagLayout());

        generalPanel.setLayout(new java.awt.GridBagLayout());

        generalLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        generalLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(generalLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.generalLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        generalPanel.add(generalLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(idLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.idLabel.text")); // NOI18N
        idLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(idLabel, gridBagConstraints);

        idTextField.setEditable(false);
        idTextField.setBackground(new java.awt.Color(231, 231, 231));
        idTextField.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(idTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(orderNumberLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.orderNumberLabel.text")); // NOI18N
        orderNumberLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderNumberLabel, gridBagConstraints);

        orderNumberTextField.setBackground(new java.awt.Color(231, 231, 231));
        orderNumberTextField.setDoubleBuffered(true);
        orderNumberTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        orderNumberTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderNumberTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(descriptionLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.descriptionLabel.text")); // NOI18N
        descriptionLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(descriptionLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(orderStatusLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.orderStatusLabel.text")); // NOI18N
        orderStatusLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderStatusLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(vehicleLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.vehicleLabel.text")); // NOI18N
        vehicleLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(vehicleLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(kilometresLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.kilometresLabel.text")); // NOI18N
        kilometresLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(kilometresLabel, gridBagConstraints);

        kilometresTextField.setBackground(new java.awt.Color(231, 231, 231));
        kilometresTextField.setDoubleBuffered(true);
        kilometresTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        kilometresTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(kilometresTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(gasTankLevelLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.gasTankLevelLabel.text")); // NOI18N
        gasTankLevelLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(gasTankLevelLabel, gridBagConstraints);

        gasTankLevelTextField.setBackground(new java.awt.Color(231, 231, 231));
        gasTankLevelTextField.setDoubleBuffered(true);
        gasTankLevelTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        gasTankLevelTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(gasTankLevelTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(orderDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.orderDateLabel.text")); // NOI18N
        orderDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(estimatedDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimatedDateLabel.text")); // NOI18N
        estimatedDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(estimatedDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(finishDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.finishDateLabel.text")); // NOI18N
        finishDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(finishDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(deliveryDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.deliveryDateLabel.text")); // NOI18N
        deliveryDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(deliveryDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(responsibleLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.responsibleLabel.text")); // NOI18N
        responsibleLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(responsibleLabel, gridBagConstraints);

        vehicleTextField.setEditable(false);
        vehicleTextField.setBackground(new java.awt.Color(231, 231, 231));
        vehicleTextField.setDoubleBuffered(true);
        vehicleTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        vehicleTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(vehicleTextField, gridBagConstraints);

        orderDateTextField.setEditable(false);
        orderDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        orderDateTextField.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderDateTextField, gridBagConstraints);

        orderStatusTextField.setEditable(false);
        orderStatusTextField.setBackground(new java.awt.Color(231, 231, 231));
        orderStatusTextField.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderStatusTextField, gridBagConstraints);

        orderEstimatedDateTextField.setEditable(false);
        orderEstimatedDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        orderEstimatedDateTextField.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderEstimatedDateTextField, gridBagConstraints);

        orderFinishDateTextField.setEditable(false);
        orderFinishDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        orderFinishDateTextField.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderFinishDateTextField, gridBagConstraints);

        orderDeliveryDateTextField.setEditable(false);
        orderDeliveryDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        orderDeliveryDateTextField.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderDeliveryDateTextField, gridBagConstraints);

        orderResponsibleTextField.setEditable(false);
        orderResponsibleTextField.setBackground(new java.awt.Color(231, 231, 231));
        orderResponsibleTextField.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(orderResponsibleTextField, gridBagConstraints);

        clientTextField.setEditable(false);
        clientTextField.setBackground(new java.awt.Color(231, 231, 231));
        clientTextField.setDoubleBuffered(true);
        clientTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        clientTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(clientTextField, gridBagConstraints);

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setBackground(new java.awt.Color(231, 231, 231));
        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(3);
        jScrollPane1.setViewportView(descriptionTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(jScrollPane1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(clientLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.clientLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(clientLabel, gridBagConstraints);

        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/printer.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(printButton, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.printButton.text")); // NOI18N
        printButton.setEnabled(false);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(printButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        mainGeneralPanel.add(generalPanel, gridBagConstraints);

        notesPanel.setLayout(new java.awt.GridBagLayout());

        notesLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        notesLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(notesLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.notesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        notesPanel.add(notesLabel, gridBagConstraints);

        notesTextArea.setEditable(false);
        notesTextArea.setBackground(new java.awt.Color(231, 231, 231));
        notesTextArea.setColumns(20);
        notesScrollPane.setViewportView(notesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        notesPanel.add(notesScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        mainGeneralPanel.add(notesPanel, gridBagConstraints);

        mainScrollPane1.setViewportView(mainGeneralPanel);

        mainTabbedPane.addTab(org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.mainScrollPane1.TabConstraints.tabTitle"), mainScrollPane1); // NOI18N

        estimateScrollPane.setBorder(null);

        estimatePanel.setLayout(new java.awt.GridBagLayout());

        estimateLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        estimateLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(estimateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimateLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        estimatePanel.add(estimateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(partsLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.partsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(partsLabel, gridBagConstraints);

        partsPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        partsPanel.setPreferredSize(new java.awt.Dimension(50, 50));

        partsTable.setAutoCreateRowSorter(true);
        partsTable.setBackground(new java.awt.Color(231, 231, 231));
        partsTable.setDoubleBuffered(true);
        partsTable.setFillsViewportHeight(true);
        partsTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        partsTable.setRowHeight(25);
        partsTable.setSelectionBackground(new java.awt.Color(186, 216, 247));
        partsPanel.setViewportView(partsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(partsPanel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(labourLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.labourLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(labourLabel, gridBagConstraints);

        labourPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        labourPanel.setPreferredSize(new java.awt.Dimension(50, 50));

        labourTable.setAutoCreateRowSorter(true);
        labourTable.setBackground(new java.awt.Color(231, 231, 231));
        labourTable.setDoubleBuffered(true);
        labourTable.setFillsViewportHeight(true);
        labourTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        labourTable.setRowHeight(25);
        labourTable.setSelectionBackground(new java.awt.Color(186, 216, 247));
        labourPanel.setViewportView(labourTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(labourPanel, gridBagConstraints);

        partsButtonsPanel.setLayout(new java.awt.GridBagLayout());

        partsTotalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(partsTotalLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.partsTotalLabel.text")); // NOI18N
        partsTotalLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        partsButtonsPanel.add(partsTotalLabel, gridBagConstraints);

        partsTotalTextField.setEditable(false);
        partsTotalTextField.setBackground(new java.awt.Color(231, 231, 231));
        partsTotalTextField.setText(org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.partsTotalTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        partsButtonsPanel.add(partsTotalTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(partsTotalWithIVALabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.partsTotalWithIVALabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        partsButtonsPanel.add(partsTotalWithIVALabel, gridBagConstraints);

        partsTotalWithIVATextField.setEditable(false);
        partsTotalWithIVATextField.setBackground(new java.awt.Color(231, 231, 231));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        partsButtonsPanel.add(partsTotalWithIVATextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(partsButtonsPanel, gridBagConstraints);

        labourButtonsPanel.setLayout(new java.awt.GridBagLayout());

        labourTotalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(labourTotalLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.labourTotalLabel.text")); // NOI18N
        labourTotalLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        labourButtonsPanel.add(labourTotalLabel, gridBagConstraints);

        labourTotalTextField.setEditable(false);
        labourTotalTextField.setBackground(new java.awt.Color(231, 231, 231));
        labourTotalTextField.setText(org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.labourTotalTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        labourButtonsPanel.add(labourTotalTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(labourTotaWithIVALabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.labourTotaWithIVALabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        labourButtonsPanel.add(labourTotaWithIVALabel, gridBagConstraints);

        labourTotalWithIVATextField.setEditable(false);
        labourTotalWithIVATextField.setBackground(new java.awt.Color(231, 231, 231));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        labourButtonsPanel.add(labourTotalWithIVATextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(labourButtonsPanel, gridBagConstraints);

        pricePanel.setLayout(new java.awt.GridBagLayout());

        discountLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(discountLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.discountLabel.text")); // NOI18N
        discountLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pricePanel.add(discountLabel, gridBagConstraints);

        discountTextField.setEditable(false);
        discountTextField.setBackground(new java.awt.Color(231, 231, 231));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pricePanel.add(discountTextField, gridBagConstraints);

        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(totalLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.totalLabel.text")); // NOI18N
        totalLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pricePanel.add(totalLabel, gridBagConstraints);

        totalTextField.setEditable(false);
        totalTextField.setBackground(new java.awt.Color(231, 231, 231));
        totalTextField.setText(org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.totalTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pricePanel.add(totalTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(totalWithIVALabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.totalWithIVALabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pricePanel.add(totalWithIVALabel, gridBagConstraints);

        totalWithIVATextField.setEditable(false);
        totalWithIVATextField.setBackground(new java.awt.Color(231, 231, 231));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pricePanel.add(totalWithIVATextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(pricePanel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(estimateNumberLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimateNumberLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateNumberLabel, gridBagConstraints);

        estimateNumberTextField.setEditable(false);
        estimateNumberTextField.setBackground(new java.awt.Color(231, 231, 231));
        estimateNumberTextField.setDoubleBuffered(true);
        estimateNumberTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        estimateNumberTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateNumberTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(estimateDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimateDateLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(estimateAcceptedDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimateAcceptedDateLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateAcceptedDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(estimateResponsibleLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimateResponsibleLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateResponsibleLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(estimateStatusLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimateStatusLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateStatusLabel, gridBagConstraints);

        estimateNotesScrollPane.setPreferredSize(new java.awt.Dimension(30, 30));

        estimateNotesTextArea.setBackground(new java.awt.Color(231, 231, 231));
        estimateNotesTextArea.setColumns(20);
        estimateNotesScrollPane.setViewportView(estimateNotesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateNotesScrollPane, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(estimateNotesLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimateNotesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateNotesLabel, gridBagConstraints);

        estimateDateTextField.setEditable(false);
        estimateDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        estimateDateTextField.setDoubleBuffered(true);
        estimateDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        estimateDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateDateTextField, gridBagConstraints);

        estimateAcceptedDateTextField.setEditable(false);
        estimateAcceptedDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        estimateAcceptedDateTextField.setDoubleBuffered(true);
        estimateAcceptedDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        estimateAcceptedDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateAcceptedDateTextField, gridBagConstraints);

        estimateStatusTextField.setEditable(false);
        estimateStatusTextField.setBackground(new java.awt.Color(231, 231, 231));
        estimateStatusTextField.setDoubleBuffered(true);
        estimateStatusTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        estimateStatusTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateStatusTextField, gridBagConstraints);

        estimateResponsibleTextField.setEditable(false);
        estimateResponsibleTextField.setBackground(new java.awt.Color(231, 231, 231));
        estimateResponsibleTextField.setDoubleBuffered(true);
        estimateResponsibleTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        estimateResponsibleTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(estimateResponsibleTextField, gridBagConstraints);

        printEstimateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/printer.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(printEstimateButton, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.printEstimateButton.text")); // NOI18N
        printEstimateButton.setEnabled(false);
        printEstimateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printEstimateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        estimatePanel.add(printEstimateButton, gridBagConstraints);

        estimateScrollPane.setViewportView(estimatePanel);

        mainTabbedPane.addTab(org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.estimateScrollPane.TabConstraints.tabTitle"), estimateScrollPane); // NOI18N

        invoiceScrollPane.setBorder(null);

        invoicePanel.setLayout(new java.awt.GridBagLayout());

        mainInvoicePanel.setLayout(new java.awt.GridBagLayout());

        invoiceLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        invoiceLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(invoiceLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        mainInvoicePanel.add(invoiceLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceNumberLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceNumberLabel.text")); // NOI18N
        invoiceNumberLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceNumberLabel, gridBagConstraints);

        invoiceNumberTextField.setEditable(false);
        invoiceNumberTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceNumberTextField.setDoubleBuffered(true);
        invoiceNumberTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceNumberTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceNumberTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceDateLabel.text")); // NOI18N
        invoiceDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceEstimatedPaymentDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceEstimatedPaymentDateLabel.text")); // NOI18N
        invoiceEstimatedPaymentDateLabel.setPreferredSize(new java.awt.Dimension(120, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceEstimatedPaymentDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoicePaymentDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoicePaymentDateLabel.text")); // NOI18N
        invoicePaymentDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoicePaymentDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceacceptedDateLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceacceptedDateLabel.text")); // NOI18N
        invoiceacceptedDateLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceacceptedDateLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoicePaymentMethodLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoicePaymentMethodLabel.text")); // NOI18N
        invoicePaymentMethodLabel.setPreferredSize(new java.awt.Dimension(120, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoicePaymentMethodLabel, gridBagConstraints);

        invoicePaymentMethodTextField.setEditable(false);
        invoicePaymentMethodTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoicePaymentMethodTextField.setDoubleBuffered(true);
        invoicePaymentMethodTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoicePaymentMethodTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoicePaymentMethodTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceStatusLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceStatusLabel.text")); // NOI18N
        invoiceStatusLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceStatusLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoiceResponsibleLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceResponsibleLabel.text")); // NOI18N
        invoiceResponsibleLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceResponsibleLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(invoicePaymentResponsibleLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoicePaymentResponsibleLabel.text")); // NOI18N
        invoicePaymentResponsibleLabel.setPreferredSize(new java.awt.Dimension(120, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoicePaymentResponsibleLabel, gridBagConstraints);

        invoiceDateTextField.setEditable(false);
        invoiceDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceDateTextField.setDoubleBuffered(true);
        invoiceDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceDateTextField, gridBagConstraints);

        invoiceEstimatedPaymentDateTextField.setEditable(false);
        invoiceEstimatedPaymentDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceEstimatedPaymentDateTextField.setDoubleBuffered(true);
        invoiceEstimatedPaymentDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceEstimatedPaymentDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceEstimatedPaymentDateTextField, gridBagConstraints);

        invoicePaymentDateTextField.setEditable(false);
        invoicePaymentDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoicePaymentDateTextField.setDoubleBuffered(true);
        invoicePaymentDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoicePaymentDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoicePaymentDateTextField, gridBagConstraints);

        invoiceAcceptedDateTextField.setEditable(false);
        invoiceAcceptedDateTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceAcceptedDateTextField.setDoubleBuffered(true);
        invoiceAcceptedDateTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceAcceptedDateTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceAcceptedDateTextField, gridBagConstraints);

        invoicePaymentResponsibleTextField.setEditable(false);
        invoicePaymentResponsibleTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoicePaymentResponsibleTextField.setDoubleBuffered(true);
        invoicePaymentResponsibleTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoicePaymentResponsibleTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoicePaymentResponsibleTextField, gridBagConstraints);

        invoiceStatusTextField.setEditable(false);
        invoiceStatusTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceStatusTextField.setDoubleBuffered(true);
        invoiceStatusTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceStatusTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceStatusTextField, gridBagConstraints);

        invoiceResponsibleTextField.setEditable(false);
        invoiceResponsibleTextField.setBackground(new java.awt.Color(231, 231, 231));
        invoiceResponsibleTextField.setDoubleBuffered(true);
        invoiceResponsibleTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        invoiceResponsibleTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(invoiceResponsibleTextField, gridBagConstraints);

        printInvoiceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/repair/icons/printer.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(printInvoiceButton, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.printInvoiceButton.text")); // NOI18N
        printInvoiceButton.setEnabled(false);
        printInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printInvoiceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainInvoicePanel.add(printInvoiceButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        invoicePanel.add(mainInvoicePanel, gridBagConstraints);

        invoiceNotesPanel.setLayout(new java.awt.GridBagLayout());

        invoiceNotesLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        invoiceNotesLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(invoiceNotesLabel, org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceNotesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        invoiceNotesPanel.add(invoiceNotesLabel, gridBagConstraints);

        invoiceNotesTextArea.setEditable(false);
        invoiceNotesTextArea.setBackground(new java.awt.Color(231, 231, 231));
        invoiceNotesTextArea.setColumns(20);
        invoiceNotesScrollPane.setViewportView(invoiceNotesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        invoiceNotesPanel.add(invoiceNotesScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        invoicePanel.add(invoiceNotesPanel, gridBagConstraints);

        invoiceScrollPane.setViewportView(invoicePanel);

        mainTabbedPane.addTab(org.openide.util.NbBundle.getMessage(RepairOrderDetailedViewTopComponent.class, "RepairOrderDetailedViewTopComponent.invoiceScrollPane.TabConstraints.tabTitle"), invoiceScrollPane); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mainPanel.add(mainTabbedPane, gridBagConstraints);

        mainScrollPane.setViewportView(mainPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(mainScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected void done() {
            }

            @Override
            protected Void doInBackground() {
                ReportPrinter printer = new ReportPrinter();
                printer.printRepairOrder(repairOrder);
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_printButtonActionPerformed

    private void printEstimateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printEstimateButtonActionPerformed
        final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected void done() {
            }

            @Override
            protected Void doInBackground() {
                ReportPrinter printer = new ReportPrinter();
                printer.printEstimate(repairOrder.getEstimate());
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_printEstimateButtonActionPerformed

    private void printInvoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInvoiceButtonActionPerformed
        final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected void done() {
            }

            @Override
            protected Void doInBackground() {
                ReportPrinter printer = new ReportPrinter();
                printer.printRepairInvoice(repairOrder.getInvoice());
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_printInvoiceButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clientLabel;
    private javax.swing.JTextField clientTextField;
    private javax.swing.JLabel deliveryDateLabel;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JTextField discountTextField;
    private javax.swing.JLabel estimateAcceptedDateLabel;
    private javax.swing.JTextField estimateAcceptedDateTextField;
    private javax.swing.JLabel estimateDateLabel;
    private javax.swing.JTextField estimateDateTextField;
    private javax.swing.JLabel estimateLabel;
    private javax.swing.JLabel estimateNotesLabel;
    private javax.swing.JScrollPane estimateNotesScrollPane;
    private javax.swing.JTextArea estimateNotesTextArea;
    private javax.swing.JLabel estimateNumberLabel;
    private javax.swing.JTextField estimateNumberTextField;
    private javax.swing.JPanel estimatePanel;
    private javax.swing.JLabel estimateResponsibleLabel;
    private javax.swing.JTextField estimateResponsibleTextField;
    private javax.swing.JScrollPane estimateScrollPane;
    private javax.swing.JLabel estimateStatusLabel;
    private javax.swing.JTextField estimateStatusTextField;
    private javax.swing.JLabel estimatedDateLabel;
    private javax.swing.JLabel finishDateLabel;
    private javax.swing.JLabel gasTankLevelLabel;
    private javax.swing.JTextField gasTankLevelTextField;
    private javax.swing.JLabel generalLabel;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JTextField invoiceAcceptedDateTextField;
    private javax.swing.JLabel invoiceDateLabel;
    private javax.swing.JTextField invoiceDateTextField;
    private javax.swing.JLabel invoiceEstimatedPaymentDateLabel;
    private javax.swing.JTextField invoiceEstimatedPaymentDateTextField;
    private javax.swing.JLabel invoiceLabel;
    private javax.swing.JLabel invoiceNotesLabel;
    private javax.swing.JPanel invoiceNotesPanel;
    private javax.swing.JScrollPane invoiceNotesScrollPane;
    private javax.swing.JTextArea invoiceNotesTextArea;
    private javax.swing.JLabel invoiceNumberLabel;
    private javax.swing.JTextField invoiceNumberTextField;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JLabel invoicePaymentDateLabel;
    private javax.swing.JTextField invoicePaymentDateTextField;
    private javax.swing.JLabel invoicePaymentMethodLabel;
    private javax.swing.JTextField invoicePaymentMethodTextField;
    private javax.swing.JLabel invoicePaymentResponsibleLabel;
    private javax.swing.JTextField invoicePaymentResponsibleTextField;
    private javax.swing.JLabel invoiceResponsibleLabel;
    private javax.swing.JTextField invoiceResponsibleTextField;
    private javax.swing.JScrollPane invoiceScrollPane;
    private javax.swing.JLabel invoiceStatusLabel;
    private javax.swing.JTextField invoiceStatusTextField;
    private javax.swing.JLabel invoiceacceptedDateLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel kilometresLabel;
    private javax.swing.JTextField kilometresTextField;
    private javax.swing.JPanel labourButtonsPanel;
    private javax.swing.JLabel labourLabel;
    private javax.swing.JScrollPane labourPanel;
    private javax.swing.JTable labourTable;
    private javax.swing.JLabel labourTotaWithIVALabel;
    private javax.swing.JLabel labourTotalLabel;
    private javax.swing.JTextField labourTotalTextField;
    private javax.swing.JTextField labourTotalWithIVATextField;
    private javax.swing.JPanel mainGeneralPanel;
    private javax.swing.JPanel mainInvoicePanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JScrollPane mainScrollPane1;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JScrollPane notesScrollPane;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JLabel orderDateLabel;
    private javax.swing.JTextField orderDateTextField;
    private javax.swing.JTextField orderDeliveryDateTextField;
    private javax.swing.JTextField orderEstimatedDateTextField;
    private javax.swing.JTextField orderFinishDateTextField;
    private javax.swing.JLabel orderNumberLabel;
    private javax.swing.JTextField orderNumberTextField;
    private javax.swing.JTextField orderResponsibleTextField;
    private javax.swing.JLabel orderStatusLabel;
    private javax.swing.JTextField orderStatusTextField;
    private javax.swing.JPanel partsButtonsPanel;
    private javax.swing.JLabel partsLabel;
    private javax.swing.JScrollPane partsPanel;
    private javax.swing.JTable partsTable;
    private javax.swing.JLabel partsTotalLabel;
    private javax.swing.JTextField partsTotalTextField;
    private javax.swing.JLabel partsTotalWithIVALabel;
    private javax.swing.JTextField partsTotalWithIVATextField;
    private javax.swing.JPanel pricePanel;
    private javax.swing.JButton printButton;
    private javax.swing.JButton printEstimateButton;
    private javax.swing.JButton printInvoiceButton;
    private javax.swing.JLabel responsibleLabel;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JTextField totalTextField;
    private javax.swing.JLabel totalWithIVALabel;
    private javax.swing.JTextField totalWithIVATextField;
    private javax.swing.JLabel vehicleLabel;
    private javax.swing.JTextField vehicleTextField;
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public HelpCtx getHelpCtx() {
        //HelpCtx ctx = new HelpCtx("sdk.scene_explorer");
        //this call is for single components:
        return new HelpCtx("es.regueiro.easyrepair.ui.repair.detailed");
    }

    @Override
    public void componentOpened() {
        result = RepairOrderLookup.getDefault().lookupResult(RepairOrder.class);
        result.addLookupListener(this);

        fillData();

    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    @Override
    public void resultChanged(LookupEvent event) {
        fillData();
    }

    private String formatCurrency(String amount) {
        String text = "";
        if (NbPreferences.root().getBoolean("inFront", false)) {
            text += NbPreferences.root().get("currency", " €");
        }
        text += amount;
        if (NbPreferences.root().getBoolean("inFront", false)) {
        } else {
            text += NbPreferences.root().get("currency", " €");
        }
        return text;
    }

    private String formatWithIVA(BigDecimal price) {
        BigDecimal iva = new BigDecimal(NbPreferences.root().get("iva", "21")).divide(new BigDecimal("100"));

        BigDecimal total = price.add(price.multiply(iva));

        return formatCurrency(total.setScale(2, RoundingMode.HALF_UP).toPlainString());
    }

    private String formatWithoutIVA(BigDecimal price) {
        return formatCurrency(price.setScale(2, RoundingMode.HALF_UP).toPlainString());
    }

    private void fillData() {
        Collection<? extends RepairOrder> repairCol = result.allInstances();
        if (!repairCol.isEmpty()) {
            RepairOrder temrepair = repairCol.iterator().next();
            if (repairOrder != temrepair) {
                repairOrder = temrepair;
                clearGeneral();
                clearEstimate();
                clearInvoice();

                if (repairOrder != null && repairOrder.getId() != null) {
                    idTextField.setText(repairOrder.getId().toString());
                    if (repairOrder.getOrderNumber() != null) {
                        orderNumberTextField.setText(repairOrder.getOrderNumber());
                    }
                    if (repairOrder.getOrderDate() != null) {
                        orderDateTextField.setText(repairOrder.getOrderDate().toString());
                    }

                    if (repairOrder.getEstimatedDate() != null) {
                        orderEstimatedDateTextField.setText(repairOrder.getEstimatedDate().toString());
                    }
                    if (repairOrder.getFinishDate() != null) {
                        orderFinishDateTextField.setText(repairOrder.getFinishDate().toString());
                    }
                    if (repairOrder.getDeliveryDate() != null) {
                        orderDeliveryDateTextField.setText(repairOrder.getDeliveryDate().toString());
                    }
                    if (repairOrder.getDescription() != null) {
                        descriptionTextArea.setText(repairOrder.getDescription());
                    }


                    if (repairOrder.getVehicle() != null) {
                        Vehicle selectedVehicle = repairOrder.getVehicle();
                        String vehicleText = selectedVehicle.getRegistration() + " - ";
                        if (selectedVehicle.getMake() != null) {
                            vehicleText += selectedVehicle.getMake() + " ";
                        }
                        if (selectedVehicle.getModel() != null) {
                            vehicleText += selectedVehicle.getModel() + " ";
                        }
                        vehicleText += "(";
                        if (selectedVehicle.getYear() != null) {
                            vehicleText += selectedVehicle.getYear() + " ";
                        }

                        if (selectedVehicle.getColour() != null) {
                            vehicleText += selectedVehicle.getColour();
                        }
                        vehicleText += ") - ";


                        if (selectedVehicle.getInsuranceCompany() != null) {
                            vehicleText += selectedVehicle.getInsuranceCompany().getName() + " ";
                        }

                        if (selectedVehicle.getInsuranceNumber() != null) {
                            vehicleText += selectedVehicle.getInsuranceNumber();
                        }

                        vehicleTextField.setText(vehicleText);

                        if (selectedVehicle.getOwner() != null) {
                            String clientText = selectedVehicle.getOwner().getName() + " ";
                            if (selectedVehicle.getOwner().getSurname() != null) {
                                clientText += selectedVehicle.getOwner().getSurname() + " ";
                            }
                            if (selectedVehicle.getOwner().getNif() != null) {
                                clientText += "(" + selectedVehicle.getOwner().getNif().getNumber() + ")";
                            }

                            clientTextField.setText(clientText);
                        }
                    }

                    if (repairOrder.getStatus() != null) {
                        orderStatusTextField.setText(repairOrder.getStatus());
                    }

                    if (repairOrder.getNotes() != null) {
                        notesTextArea.setText(repairOrder.getNotes());
                    }
                    if (repairOrder.getKilometres() != null) {
                        kilometresTextField.setText(repairOrder.getKilometres());
                    }
                    if (repairOrder.getGasTankLevel() != null) {
                        gasTankLevelTextField.setText(repairOrder.getGasTankLevel());
                    }

                    if (repairOrder.getEstimate() != null) {

                        if (repairOrder.getEstimate().getEstimateNumber() != null) {
                            estimateNumberTextField.setText(repairOrder.getEstimate().getEstimateNumber());
                        }
                        if (repairOrder.getEstimate().getEstimateDate() != null) {
                            estimateDateTextField.setText(repairOrder.getEstimate().getEstimateDate().toString());
                        }

                        if (repairOrder.getEstimate().getAcceptedDate() != null) {
                            estimateAcceptedDateTextField.setText(repairOrder.getEstimate().getAcceptedDate().toString());
                        }

                        if (repairOrder.getEstimate().getNotes() != null) {
                            estimateNotesTextArea.setText(repairOrder.getEstimate().getNotes());
                        }

                        if (repairOrder.getEstimate().getDiscount() != null) {
                            discountTextField.setText(repairOrder.getEstimate().getDiscount().toString());
                        }

                    }
                    fillPartsList();
                    fillLabourList();
                    calculateTotal();

                    if (repairOrder.getInvoice() != null) {
                        if (repairOrder.getInvoice().getInvoiceNumber() != null) {
                            invoiceNumberTextField.setText(repairOrder.getInvoice().getInvoiceNumber());
                        }


                        if (repairOrder.getInvoice().getInvoiceDate() != null) {
                            invoiceDateTextField.setText(repairOrder.getInvoice().getInvoiceDate().toString());
                        }

                        if (repairOrder.getInvoice().getAcceptedDate() != null) {
                            invoiceAcceptedDateTextField.setText(repairOrder.getInvoice().getAcceptedDate().toString());
                        }
                        if (repairOrder.getInvoice().getEstimatedPaymentDate() != null) {
                            invoiceEstimatedPaymentDateTextField.setText(repairOrder.getInvoice().getEstimatedPaymentDate().toString());
                        }
                        if (repairOrder.getInvoice().getPaymentDate() != null) {
                            invoicePaymentDateTextField.setText(repairOrder.getInvoice().getPaymentDate().toString());
                        }
                        if (repairOrder.getInvoice().getPaymentMethod() != null) {
                            invoicePaymentMethodTextField.setText(repairOrder.getInvoice().getPaymentMethod());
                        }
                        if (repairOrder.getInvoice().getNotes() != null) {
                            invoiceNotesTextArea.setText(repairOrder.getInvoice().getNotes());
                        }
                    }
                }


                printButton.setEnabled(true);
                printInvoiceButton.setEnabled(true);
                printEstimateButton.setEnabled(true);

            }
        } else {
//            clear();
        }


    }

    private void fillPartsList() {
        if (repairOrder.getPartsList() != null && !repairOrder.getPartsList().isEmpty()) {
            partListModel.fill(repairOrder.getPartsList());
        } else {
            partListModel.fill(null);
        }

        partsTotal = new BigDecimal("0");
        if (partListModel.getRowCount() > 0) {
            List<PartLine> partsL = partListModel.getPartLineList();
            for (PartLine p : partsL) {
                BigDecimal partPrice = p.getPart().getPrice().multiply(new BigDecimal(p.getQuantity()));
                BigDecimal partDiscount = new BigDecimal("1").subtract(p.getDiscount().divide(new BigDecimal("100")));

                partsTotal = partsTotal.add(partPrice.multiply(partDiscount));
            }

            //TODO add options support to set currency
        }

        partsTotalTextField.setText(formatCurrency(partsTotal.setScale(2, RoundingMode.HALF_UP).toPlainString()));
        BigDecimal iva = new BigDecimal(NbPreferences.root().get("iva", "21")).divide(new BigDecimal("100"));
        partsTotalWithIVATextField.setText(formatCurrency(partsTotal.add(partsTotal.multiply(iva)).setScale(2, RoundingMode.HALF_UP).toPlainString()));
    }

    private void fillLabourList() {
        if (repairOrder.getLabourList() != null && !repairOrder.getLabourList().isEmpty()) {
            labourListModel.fill(repairOrder.getLabourList());
        } else {
            labourListModel.fill(null);
        }

        labourTotal = new BigDecimal("0");
        if (labourListModel.getRowCount() > 0) {
            List<LabourLine> labourL = labourListModel.getLabourLineList();
            for (LabourLine l : labourL) {
                BigDecimal labourPrice = l.getLabour().getPrice().multiply(l.getHours());
                BigDecimal labourDiscount = new BigDecimal("1").subtract(l.getDiscount().divide(new BigDecimal("100")));

                labourTotal = labourTotal.add(labourPrice.multiply(labourDiscount));
            }

            //TODO add options support to set currency
        }
        labourTotalTextField.setText(formatCurrency(labourTotal.setScale(2, RoundingMode.HALF_UP).toPlainString()));
        BigDecimal iva = new BigDecimal(NbPreferences.root().get("iva", "21")).divide(new BigDecimal("100"));
        labourTotalWithIVATextField.setText(formatCurrency(labourTotal.add(labourTotal.multiply(iva)).setScale(2, RoundingMode.HALF_UP).toPlainString()));
    }

    private void calculateTotal() {
        BigDecimal discount;

        if (!StringUtils.isBlank(discountTextField.getText())) {
            try {
                discount = new BigDecimal(discountTextField.getText());
            } catch (NumberFormatException e) {
                discount = new BigDecimal("0");
            }
        } else {
            discount = new BigDecimal("0");
        }
        BigDecimal totalDiscount = new BigDecimal("1").subtract(discount.divide(new BigDecimal("100")));
        BigDecimal iva = new BigDecimal(NbPreferences.root().get("iva", "21")).divide(new BigDecimal("100"));

        BigDecimal total = (partsTotal.add(labourTotal)).multiply(totalDiscount);


        totalTextField.setText(formatCurrency(total.setScale(2, RoundingMode.HALF_UP).toPlainString()));
        totalWithIVATextField.setText(formatCurrency(total.add(total.multiply(iva)).setScale(2, RoundingMode.HALF_UP).toPlainString()));

    }

    private void clearGeneral() {
        idTextField.setText("");
        vehicleTextField.setText("");
        orderNumberTextField.setText("");
        orderDateTextField.setText("");
        orderEstimatedDateTextField.setText("");
        orderFinishDateTextField.setText("");
        orderDeliveryDateTextField.setText("");
        orderResponsibleTextField.setText("");
        orderStatusTextField.setText("");
        notesTextArea.setText("");

        printButton.setEnabled(false);
        printInvoiceButton.setEnabled(false);
        printEstimateButton.setEnabled(false);
    }

    private void clearEstimate() {
        estimateAcceptedDateTextField.setText("");
        estimateDateTextField.setText("");
        estimateNotesTextArea.setText("");
        estimateNumberTextField.setText("");
        estimateResponsibleTextField.setText("");
        estimateStatusTextField.setText("");

        partsTotalTextField.setText("");
        partsTotalWithIVATextField.setText("");
        labourTotalTextField.setText("");
        labourTotalWithIVATextField.setText("");
        discountTextField.setText("");
        totalTextField.setText("");
        totalWithIVATextField.setText("");

        partListModel.clear();
        labourListModel.clear();
    }

    private void clearInvoice() {
        invoiceAcceptedDateTextField.setText("");
        invoiceDateTextField.setText("");
        invoiceEstimatedPaymentDateTextField.setText("");
        invoiceNotesTextArea.setText("");
        invoiceNumberTextField.setText("");
        invoicePaymentDateTextField.setText("");
        invoicePaymentMethodTextField.setText("");
        invoicePaymentResponsibleTextField.setText("");
        invoiceResponsibleTextField.setText("");
        invoiceStatusTextField.setText("");
    }

    public void viewEstimate(Estimate estimate) {
        if (repairOrder != null && estimate != null && repairOrder.getEstimate().equals(estimate)) {
            mainTabbedPane.setSelectedIndex(1);
        }
    }

    public void viewInvoice(Invoice invoice) {
        if (repairOrder != null && invoice != null && repairOrder.getInvoice().equals(invoice)) {
            mainTabbedPane.setSelectedIndex(2);
        }
    }
}
