package es.regueiro.easyrepair.ui.user;

import es.regueiro.easyrepair.api.user.controller.RoleController;
import es.regueiro.easyrepair.login.SecurityManager;
import es.regueiro.easyrepair.model.user.Privilege;
import es.regueiro.easyrepair.model.user.Role;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.ActionMap;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.text.DefaultEditorKit;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.awt.StatusDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//es.regueiro.easyrepair.ui.user//RoleBrowser//EN",
autostore = false)
@TopComponent.Description(preferredID = "RoleBrowserTopComponent",
iconBase = "es/regueiro/easyrepair/ui/user/icons/lock.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(position = 28, mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "es.regueiro.easyrepair.ui.user.RoleBrowserTopComponent")
@ActionReferences({
    @ActionReference(path = "Menu/Usuarios", position = 1),
    @ActionReference(path = "Toolbars/Usuarios", position = 1)
})
@TopComponent.OpenActionRegistration(displayName = "#CTL_RoleBrowserAction",
preferredID = "RoleBrowserTopComponent")
@Messages({
    "CTL_RoleBrowserAction=Buscador de roles",
    "CTL_RoleBrowserTopComponent=Buscador de roles",
    "HINT_RoleBrowserTopComponent=Esta es una ventana del buscador de roles"
})
public final class RoleBrowserTopComponent extends TopComponent implements TableModelListener, ListSelectionListener {

    private RoleTableModel model = new RoleTableModel();
    private InstanceContent content = new InstanceContent();
    private RoleController controller = Lookup.getDefault().lookup(RoleController.class);
    private Role role;
    private RoleLookup lookup = RoleLookup.getDefault();

    public RoleBrowserTopComponent() {
        initComponents();
        setName(Bundle.CTL_RoleBrowserTopComponent());
        setToolTipText(Bundle.HINT_RoleBrowserTopComponent());
        this.setFocusable(true);

        String[] inCBStrings = {java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("NAME"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("DESCRIPTION")};

        for (String s : inCBStrings) {
            inCombobox.addItem(s);
        }
        // Associate the table model
        roleTable.setModel(model);


        // Listen for intro on the search bar
        searchEntryField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                doSearch();
            }
        });


        // Activate Copy/Paste
        ActionMap actionMap = getActionMap();
        actionMap.put(DefaultEditorKit.copyAction, new DefaultEditorKit.CopyAction());
        actionMap.put(DefaultEditorKit.cutAction, new DefaultEditorKit.CutAction());
        actionMap.put(DefaultEditorKit.pasteAction, new DefaultEditorKit.PasteAction());
        content.add(actionMap);

        // Listen to the changes on the table
        model.addTableModelListener(this);
        roleTable.getSelectionModel().addListSelectionListener(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        searchPanel = new javax.swing.JPanel();
        searchEntryPanel = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        searchEntryField = new javax.swing.JTextField();
        inLabel = new javax.swing.JLabel();
        listAllButton = new javax.swing.JButton();
        inCombobox = new javax.swing.JComboBox();
        searchButtonPanel = new javax.swing.JPanel();
        findButton = new javax.swing.JButton();
        tablePanel = new javax.swing.JScrollPane();
        roleTable = new javax.swing.JTable();
        topToolBar = new javax.swing.JToolBar();
        newRoleButton = new javax.swing.JButton();
        editRoleButton = new javax.swing.JButton();
        deleteRoleButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        searchPanel.setMaximumSize(new java.awt.Dimension(2147483647, 300));
        searchPanel.setLayout(new java.awt.GridBagLayout());

        searchEntryPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(searchLabel, org.openide.util.NbBundle.getMessage(RoleBrowserTopComponent.class, "RoleBrowserTopComponent.searchLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchEntryPanel.add(searchLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchEntryPanel.add(searchEntryField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(inLabel, org.openide.util.NbBundle.getMessage(RoleBrowserTopComponent.class, "RoleBrowserTopComponent.inLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchEntryPanel.add(inLabel, gridBagConstraints);

        listAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/user/icons/group.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(listAllButton, org.openide.util.NbBundle.getMessage(RoleBrowserTopComponent.class, "RoleBrowserTopComponent.listAllButton.text")); // NOI18N
        listAllButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        listAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchEntryPanel.add(listAllButton, gridBagConstraints);

        inCombobox.setPreferredSize(new java.awt.Dimension(79, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchEntryPanel.add(inCombobox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        searchPanel.add(searchEntryPanel, gridBagConstraints);

        searchButtonPanel.setLayout(new java.awt.BorderLayout(5, 5));

        findButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/user/icons/find32.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(findButton, org.openide.util.NbBundle.getMessage(RoleBrowserTopComponent.class, "RoleBrowserTopComponent.findButton.text")); // NOI18N
        findButton.setMargin(new java.awt.Insets(5, 15, 5, 15));
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        searchButtonPanel.add(findButton, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(9, 10, 10, 10);
        searchPanel.add(searchButtonPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        add(searchPanel, gridBagConstraints);

        tablePanel.setMinimumSize(new java.awt.Dimension(100, 100));

        roleTable.setAutoCreateRowSorter(true);
        roleTable.setDoubleBuffered(true);
        roleTable.setFillsViewportHeight(true);
        roleTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        roleTable.setRowHeight(25);
        roleTable.setSelectionBackground(new java.awt.Color(186, 216, 247));
        roleTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablePanel.setViewportView(roleTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 7);
        add(tablePanel, gridBagConstraints);

        topToolBar.setBorder(null);
        topToolBar.setFloatable(false);
        topToolBar.setRollover(true);

        newRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/user/icons/add.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(newRoleButton, org.openide.util.NbBundle.getMessage(RoleBrowserTopComponent.class, "RoleBrowserTopComponent.newRoleButton.text")); // NOI18N
        newRoleButton.setFocusable(false);
        newRoleButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        newRoleButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        newRoleButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        newRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRoleButtonActionPerformed(evt);
            }
        });
        topToolBar.add(newRoleButton);

        editRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/user/icons/lock_edit.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(editRoleButton, org.openide.util.NbBundle.getMessage(RoleBrowserTopComponent.class, "RoleBrowserTopComponent.editRoleButton.text")); // NOI18N
        editRoleButton.setEnabled(false);
        editRoleButton.setFocusable(false);
        editRoleButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        editRoleButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        editRoleButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        editRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoleButtonActionPerformed(evt);
            }
        });
        topToolBar.add(editRoleButton);

        deleteRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/user/icons/cross.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteRoleButton, org.openide.util.NbBundle.getMessage(RoleBrowserTopComponent.class, "RoleBrowserTopComponent.deleteRoleButton.text")); // NOI18N
        deleteRoleButton.setEnabled(false);
        deleteRoleButton.setFocusable(false);
        deleteRoleButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        deleteRoleButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        deleteRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoleButtonActionPerformed(evt);
            }
        });
        topToolBar.add(deleteRoleButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        add(topToolBar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        doSearch();
    }//GEN-LAST:event_findButtonActionPerformed

    private void listAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAllButtonActionPerformed
        doListAll();
    }//GEN-LAST:event_listAllButtonActionPerformed

    private void newRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRoleButtonActionPerformed
        lookup.clear();
        editRoleButton.setEnabled(false);
        deleteRoleButton.setEnabled(false);
        roleTable.clearSelection();
        openRoleEditor();
    }//GEN-LAST:event_newRoleButtonActionPerformed
    private void editRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoleButtonActionPerformed
        openRoleEditor();
    }//GEN-LAST:event_editRoleButtonActionPerformed

    private void deleteRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoleButtonActionPerformed
        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("SURE_DELETE_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")),
                java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("DELETE"), NotifyDescriptor.YES_NO_OPTION);

        Object retval = DialogDisplayer.getDefault().notify(d);

        if (retval == NotifyDescriptor.YES_OPTION) {

            RoleEditorTopComponent window = (RoleEditorTopComponent) WindowManager.getDefault().findTopComponent("RoleEditorTopComponent");
            if (window.getRole() != null && role.getId().equals(window.getRole().getId())) {
                window.forceClose();
            }


            final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                protected void done() {
                    StatusDisplayer.getDefault().setStatusText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("X_DELETED"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")));
                    lookup.clear();
                }

                @Override
                protected Void doInBackground() {
                    model.removeRow(roleTable.convertRowIndexToModel(roleTable.getSelectedRow()));
                    controller.setRole(role);
                    controller.deleteRole();
                    role = null;
                    return null;
                }
            };


            worker.execute();

        }
    }//GEN-LAST:event_deleteRoleButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteRoleButton;
    private javax.swing.JButton editRoleButton;
    private javax.swing.JButton findButton;
    private javax.swing.JComboBox inCombobox;
    private javax.swing.JLabel inLabel;
    private javax.swing.JButton listAllButton;
    private javax.swing.JButton newRoleButton;
    private javax.swing.JTable roleTable;
    private javax.swing.JPanel searchButtonPanel;
    private javax.swing.JTextField searchEntryField;
    private javax.swing.JPanel searchEntryPanel;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JScrollPane tablePanel;
    private javax.swing.JToolBar topToolBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public HelpCtx getHelpCtx() {
        //HelpCtx ctx = new HelpCtx("sdk.scene_explorer");
        //this call is for single components:
        return new HelpCtx("es.regueiro.easyrepair.ui.user.role.browser");
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentActivated() {
        if (SecurityManager.getDefault().isUserLoggedIn()) {
            newRoleButton.setEnabled(SecurityManager.getDefault().userHasPrivilege(Privilege.USER_EDIT));
        } else {
            this.close();
        }
    }

    @Override
    public void componentClosed() {
        model.clear();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void tableChanged(TableModelEvent e) {
    }

    @Override
    public void valueChanged(ListSelectionEvent event) {
        if (!event.getValueIsAdjusting()) {
            if (roleTable.getSelectedRow() > -1) {
                role = model.getRow(roleTable.convertRowIndexToModel(roleTable.getSelectedRow()));
                editRoleButton.setEnabled(SecurityManager.getDefault().userHasPrivilege(Privilege.USER_EDIT));
                deleteRoleButton.setEnabled(SecurityManager.getDefault().userHasPrivilege(Privilege.USER_EDIT));
                lookup.setRole(role);
            } else {
                editRoleButton.setEnabled(false);
                deleteRoleButton.setEnabled(false);
            }
        }
    }

    private void openRoleEditor() {
        TopComponent window = WindowManager.getDefault().findTopComponent("RoleEditorTopComponent");
        if (window == null) {
            window = new RoleEditorTopComponent();
        } else {
            window.close();
        }
        window.open();
        window.requestActive();
    }

    private void doSearch() {
        final ProgressHandle p = ProgressHandleFactory.createHandle(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("SEARCHING"));

        final SwingWorker<List<Role>, Void> worker = new SwingWorker<List<Role>, Void>() {
            private int column;

            @Override
            protected void done() {
                try {
                    List<Role> list = get();
                    model.fill(list);

                    if (column != 1) {
                        roleTable.getRowSorter().toggleSortOrder(column - 1);
                    } else {
                        roleTable.getRowSorter().toggleSortOrder(2);
                    }

                    roleTable.getRowSorter().toggleSortOrder(column);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                } catch (ExecutionException e) {
                    throw new RuntimeException(e);
                }
                p.finish();
            }

            @Override
            protected List<Role> doInBackground() {
                int selected = inCombobox.getSelectedIndex();
                String toSearch = searchEntryField.getText();
                List<Role> list = null;
                column = 0;
                if (!toSearch.isEmpty()) {
                    p.setDisplayName(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("SEARCHING_FOR_X"), new Object[]{toSearch}));
                }
                try {
                    switch (selected) {
                        case 0:
                            list = controller.searchByName(toSearch);
                            column = 1;
                            break;
                        case 1:
                            list = controller.searchByDescription(toSearch);
                            column = 2;
                            break;
                        default:
                            //this should never happen
                            list = null;
                    }
                } catch (Exception e) {
                    NotifyDescriptor d = new NotifyDescriptor.Message(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ERROR_SEARCH"), NotifyDescriptor.ERROR_MESSAGE);
                    Object retval = DialogDisplayer.getDefault().notify(d);
                    p.finish();
                }
                return list;
            }
        };
        p.start();
        worker.execute();
    }

    private void doListAll() {

        final ProgressHandle p = ProgressHandleFactory.createHandle(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("LISTING_ALL_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLES")));

        SwingWorker<List<Role>, Void> worker = new SwingWorker<List<Role>, Void>() {
            @Override
            protected void done() {
                try {
                    model.fill(get());
                    roleTable.getRowSorter().toggleSortOrder(2);
                    roleTable.getRowSorter().toggleSortOrder(1);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                } catch (ExecutionException e) {
                    throw new RuntimeException(e);
                }
                p.finish();
            }

            @Override
            protected List<Role> doInBackground() {
                List<Role> list = null;
                try {
                    list = controller.listAll();
                } catch (Exception e) {
                    p.finish();
                    NotifyDescriptor d = new NotifyDescriptor.Message(e.getMessage(), NotifyDescriptor.ERROR_MESSAGE);
                    Object retval = DialogDisplayer.getDefault().notify(d);
                }

                return list;
            }
        };

        p.start();
        worker.execute();
    }

    public void deleteRole(Role emp) {
        if (role != null && emp.getId().equals(role.getId())) {
            role = null;
            StatusDisplayer.getDefault().setStatusText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("X_DELETED"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")));
            lookup.clear();

        }

        model.removeRole(emp);

    }
}
