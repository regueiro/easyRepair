package es.regueiro.easyrepair.ui.user;

//import es.regueiro.easyrepair.api.user.controller.PrivilegeController;
import es.regueiro.easyrepair.login.SecurityManager;
import es.regueiro.easyrepair.api.user.controller.RoleController;
import es.regueiro.easyrepair.model.user.Privilege;
import es.regueiro.easyrepair.model.user.Role;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.ActionMap;
import javax.swing.SwingWorker;
import javax.swing.event.*;
import javax.swing.text.DefaultEditorKit;
import org.apache.commons.lang3.StringUtils;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.*;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//es.regueiro.easyrepair.ui.user//RoleEditor//EN",
autostore = false)
@TopComponent.Description(iconBase = "es/regueiro/easyrepair/ui/user/icons/lock_edit.png", preferredID = "RoleEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(position = 29, mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "es.regueiro.easyrepair.ui.user.RoleEditorTopComponent")
@TopComponent.OpenActionRegistration(displayName = "#CTL_RoleEditorAction",
preferredID = "RoleEditorTopComponent")
@Messages({
    "CTL_RoleEditorAction=Editor de roles",
    "CTL_RoleEditorTopComponent=Editor de roles",
    "HINT_RoleEditorTopComponent=Esta es una ventana del editor de roles"
})
public final class RoleEditorTopComponent extends TopComponent implements LookupListener, DocumentListener, TableModelListener, ListSelectionListener {

    private Role role = null;
    private Role oldRole = null;
    private Lookup.Result<Role> result;
    private InstanceContent content = new InstanceContent();
    private UndoRedo.Manager manager = new UndoRedo.Manager();
    private RoleController controller = Lookup.getDefault().lookup(RoleController.class);
//    private PrivilegeController privController = Lookup.getDefault().lookup(PrivilegeController.class);
    private PrivilegeTableModel model = new PrivilegeTableModel();
    private DialogDescriptor editEmaildialog;
    private DialogDescriptor editAddressdialog;
    private DialogDescriptor editPhonedialog;
    private boolean modified = false;
    private boolean newRole = true;
    private boolean invalid = false;
    private List<Privilege> privilegeList = new ArrayList<Privilege>();

    public RoleEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_RoleEditorTopComponent());
        setToolTipText(Bundle.HINT_RoleEditorTopComponent());
        this.setFocusable(true);
        associateLookup(new AbstractLookup(content));
        ActionMap actionMap = getActionMap();
        actionMap.put(DefaultEditorKit.copyAction, new DefaultEditorKit.CopyAction());
        actionMap.put(DefaultEditorKit.cutAction, new DefaultEditorKit.CutAction());
        actionMap.put(DefaultEditorKit.pasteAction, new DefaultEditorKit.PasteAction());
        content.add(actionMap);

        privilegeTable.setModel(model);

        

        nameTextField.setDocument(new MaxLengthTextDocument(100));

        nameTextField.getDocument().addDocumentListener(this);
        descriptionTextArea.getDocument().addDocumentListener(this);

        setupUndo();

        model.addTableModelListener(this);
        privilegeTable.getSelectionModel().addListSelectionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topToolBar = new javax.swing.JToolBar();
        saveRoleButton = new javax.swing.JButton();
        reloadRoleButton = new javax.swing.JButton();
        deleteRoleButton = new javax.swing.JButton();
        generalPanel = new javax.swing.JPanel();
        generalLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        roleLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        tablePanel = new javax.swing.JScrollPane();
        privilegeTable = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        topToolBar.setBorder(null);
        topToolBar.setFloatable(false);
        topToolBar.setRollover(true);

        saveRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/user/icons/disk.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(saveRoleButton, org.openide.util.NbBundle.getMessage(RoleEditorTopComponent.class, "RoleEditorTopComponent.saveRoleButton.text")); // NOI18N
        saveRoleButton.setFocusable(false);
        saveRoleButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        saveRoleButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        saveRoleButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        saveRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRoleButtonActionPerformed(evt);
            }
        });
        topToolBar.add(saveRoleButton);

        reloadRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/user/icons/arrow_refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(reloadRoleButton, org.openide.util.NbBundle.getMessage(RoleEditorTopComponent.class, "RoleEditorTopComponent.reloadRoleButton.text")); // NOI18N
        reloadRoleButton.setFocusable(false);
        reloadRoleButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        reloadRoleButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        reloadRoleButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        reloadRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadRoleButtonActionPerformed(evt);
            }
        });
        topToolBar.add(reloadRoleButton);

        deleteRoleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/user/icons/cross.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteRoleButton, org.openide.util.NbBundle.getMessage(RoleEditorTopComponent.class, "RoleEditorTopComponent.deleteRoleButton.text")); // NOI18N
        deleteRoleButton.setFocusable(false);
        deleteRoleButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        deleteRoleButton.setMargin(new java.awt.Insets(5, 5, 5, 5));
        deleteRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoleButtonActionPerformed(evt);
            }
        });
        topToolBar.add(deleteRoleButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(topToolBar, gridBagConstraints);

        generalPanel.setLayout(new java.awt.GridBagLayout());

        generalLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        generalLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(generalLabel, org.openide.util.NbBundle.getMessage(RoleEditorTopComponent.class, "RoleEditorTopComponent.generalLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        generalPanel.add(generalLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(idLabel, org.openide.util.NbBundle.getMessage(RoleEditorTopComponent.class, "RoleEditorTopComponent.idLabel.text")); // NOI18N
        idLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(idLabel, gridBagConstraints);

        idTextField.setBackground(new java.awt.Color(232, 231, 231));
        idTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(idTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(RoleEditorTopComponent.class, "RoleEditorTopComponent.nameLabel.text")); // NOI18N
        nameLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nameLabel, gridBagConstraints);

        nameTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        nameTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nameTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(roleLabel, org.openide.util.NbBundle.getMessage(RoleEditorTopComponent.class, "RoleEditorTopComponent.roleLabel.text")); // NOI18N
        roleLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(roleLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(descriptionLabel, org.openide.util.NbBundle.getMessage(RoleEditorTopComponent.class, "RoleEditorTopComponent.descriptionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(descriptionLabel, gridBagConstraints);

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(descriptionScrollPane, gridBagConstraints);

        tablePanel.setMinimumSize(new java.awt.Dimension(100, 100));
        tablePanel.setPreferredSize(null);

        privilegeTable.setAutoCreateRowSorter(true);
        privilegeTable.setDoubleBuffered(true);
        privilegeTable.setFillsViewportHeight(true);
        privilegeTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        privilegeTable.setRowHeight(25);
        privilegeTable.setSelectionBackground(new java.awt.Color(186, 216, 247));
        privilegeTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tablePanel.setViewportView(privilegeTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(tablePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(generalPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void saveRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRoleButtonActionPerformed
        saveRole();
    }//GEN-LAST:event_saveRoleButtonActionPerformed

    private void reloadRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadRoleButtonActionPerformed
        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("SURE_RELOAD_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")),
                java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("RELOAD"), NotifyDescriptor.YES_NO_OPTION);

        Object retval = DialogDisplayer.getDefault().notify(d);

        if (retval == NotifyDescriptor.YES_OPTION) {
            final SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
                @Override
                protected void done() {
                    modified = false;
                    invalid = false;
                    try {
                        if (get()) {
                            fillData();
                        } else {
                            NotifyDescriptor d = new NotifyDescriptor.Message(
                                    java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE_RELOAD_NOT_FOUND"),
                                    NotifyDescriptor.ERROR_MESSAGE);
                            Object retval = DialogDisplayer.getDefault().notify(d);
                        }
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    } catch (ExecutionException e) {
                        throw new RuntimeException(e);
                    }
                    StatusDisplayer.getDefault().setStatusText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("RELOADED_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")));
                }

                @Override
                protected Boolean doInBackground() {
                    role = controller.reloadRole();
                    if (role != null) {
                        controller.setRole(role);
                        return true;
                    } else {
                        return false;
                    }
                }
            };


            worker.execute();

        }
    }//GEN-LAST:event_reloadRoleButtonActionPerformed

    private void deleteRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoleButtonActionPerformed
        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("SURE_DELETE_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")),
                java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("DELETE"), NotifyDescriptor.YES_NO_OPTION);

        Object retval = DialogDisplayer.getDefault().notify(d);

        if (retval == NotifyDescriptor.YES_OPTION) {


            RoleLookup.getDefault().clear();

            RoleBrowserTopComponent window = (RoleBrowserTopComponent) WindowManager.getDefault().findTopComponent("RoleBrowserTopComponent");

            window.deleteRole(role);
            final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                protected void done() {
                    forceClose();
                    StatusDisplayer.getDefault().setStatusText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("X_DELETED"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")));
                }

                @Override
                protected Void doInBackground() {
                    controller.setRole(role);
                    controller.deleteRole();
                    return null;
                }
            };


            worker.execute();

        }
    }//GEN-LAST:event_deleteRoleButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteRoleButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JLabel generalLabel;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JTable privilegeTable;
    private javax.swing.JButton reloadRoleButton;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JButton saveRoleButton;
    private javax.swing.JScrollPane tablePanel;
    private javax.swing.JToolBar topToolBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public HelpCtx getHelpCtx() {
        return new HelpCtx("es.regueiro.easyrepair.ui.role.editor");
    }

    public Role getRole() {
        return role;
    }

    public void forceClose() {
        modified = false;
        this.close();
    }

    @Override
    public void componentOpened() {
        fillPrivilegeTable();
        
        invalid = false;
        result = RoleLookup.getDefault().lookupResult(Role.class);
        result.removeLookupListener(this);

        
        Collection<? extends Role> roleColId = result.allInstances();
        if (!roleColId.isEmpty()) {
            role = controller.getRoleById(roleColId.iterator().next().getId());
            if (role == null) {
                NotifyDescriptor d = new NotifyDescriptor.Message(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("X_NOT_FOUND"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")), NotifyDescriptor.ERROR_MESSAGE);
                Object retval = DialogDisplayer.getDefault().notify(d);
                close();
            } else {
                newRole = false;
            }
        } else {
            role = controller.newRole();
            newRole = true;
        }
        if (role != null) {
            reloadRoleButton.setEnabled(!newRole);
            deleteRoleButton.setEnabled(!newRole);
            controller.setRole(role);
            fillData();
            StatusDisplayer.getDefault().setStatusText("");
        }

    }

    @Override
    public void componentClosed() {
        manager.discardAllEdits();
        model.clear();
        privilegeList.clear();
    }

    @Override
    public void componentActivated() {
        checkPermissions();
    }

    @Override
    public boolean canClose() {
        if (modified) {
            NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                    java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("CHANGES_WILL_BE_LOST"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")),
                    java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("CLOSE"), NotifyDescriptor.YES_NO_OPTION);

            Object retval = DialogDisplayer.getDefault().notify(d);

            if (retval == NotifyDescriptor.YES_OPTION) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return manager;
    }

    private void checkPermissions() {
        if (!SecurityManager.getDefault().isUserLoggedIn() || !SecurityManager.getDefault().userHasPrivilege(Privilege.USER_EDIT)) {
            this.forceClose();
        }
    }

    private void fillData() {
        if (!invalid) {
            clearGeneral();
            privilegeTable.clearSelection();

            if (role != null && role.getId() != null) {
                idTextField.setText(role.getId().toString());

                if (role.getName() != null) {
                    nameTextField.setText(role.getName());
                }
                if (role.getDescription() != null) {
                    descriptionTextArea.setText(role.getDescription());
                }
                if (role.getPrivileges() != null && !role.getPrivileges().isEmpty()) {
                    for (Privilege p : role.getPrivileges()) {
                        privilegeTable.getSelectionModel().addSelectionInterval(privilegeTable.convertRowIndexToView(model.getPrivilegeIndex(p)), privilegeTable.convertRowIndexToView(model.getPrivilegeIndex(p)));
                    }
                }
            }

            manager.discardAllEdits();
            modified = invalid;
            saveRoleButton.setEnabled(modified);
            deleteRoleButton.setEnabled(!newRole);
            reloadRoleButton.setEnabled(modified && !newRole);
        }
    }

    private void clearGeneral() {
        idTextField.setText("");
        nameTextField.setText("");
        descriptionTextArea.setText("");
    }

    private void saveRole() {
        if (!StringUtils.isBlank(nameTextField.getText())) {

            if (!privilegeList.isEmpty()) {
                role.setName(nameTextField.getText());

                if (!StringUtils.isBlank(descriptionTextArea.getText())) {
                    role.setDescription(descriptionTextArea.getText());
                }

                role.clearPrivileges();

                for (Privilege p : privilegeList) {
                    role.addPrivilege(p);
                }


//            
                final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                    ProgressHandle p = ProgressHandleFactory.createHandle(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("SAVING"));

                    @Override
                    protected void done() {
                        fillData();
                        p.finish();
                    }

                    @Override
                    protected Void doInBackground() {
                        p.start();
                        try {
                            controller.setRole(role);
                            controller.saveRole();
                            newRole = false;
                            invalid = false;
                        } catch (Exception e) {
                            if (e.getMessage().contains("was updated or deleted by another role")) {
                                NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                        java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("OVERWRITE_DIALOG"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")),
                                        java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("X_MODIFIED"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")));
                                String options[] = new String[2];
                                options[0] = java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("OVERWRITE");
                                options[1] = java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("RELOAD");
                                d.setOptions(options);
                                Object retval = DialogDisplayer.getDefault().notify(d);
                                if (retval.equals(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("OVERWRITE"))) {
                                    controller.overwriteRole();
                                    role = controller.getRole();
                                    invalid = false;
                                } else if (retval.equals(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("RELOAD"))) {
                                    reloadRoleButton.doClick();
                                }
                            } else {
                                NotifyDescriptor d = new NotifyDescriptor.Message(e.getMessage(), NotifyDescriptor.ERROR_MESSAGE);
                                Object retval = DialogDisplayer.getDefault().notify(d);
                                System.out.println(e.toString());
                                invalid = true;
                            }
                        }
                        return null;
                    }
                };

                worker.execute();
            } else {
                NotifyDescriptor d = new NotifyDescriptor.Message(
                        java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("MUST_SELECT_X"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("PRIVILEGE")), NotifyDescriptor.WARNING_MESSAGE);
                Object retval = DialogDisplayer.getDefault().notify(d);
                invalid = true;
            }
        } else {
            NotifyDescriptor d = new NotifyDescriptor.Message(
                    java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("X_NAME_NOT_BLANK"), java.util.ResourceBundle.getBundle("es/regueiro/easyrepair/ui/user/Bundle").getString("ROLE")), NotifyDescriptor.WARNING_MESSAGE);
            Object retval = DialogDisplayer.getDefault().notify(d);
            invalid = true;
        }
    }

    private void fillPrivilegeTable() {
        List<Privilege> list = Arrays.asList(Privilege.values());
        model.fill(list);
    }

    private void setupUndo() {
        nameTextField.getDocument().addUndoableEditListener(manager);
        descriptionTextArea.getDocument().addUndoableEditListener(manager);
    }

    private void removeUndo() {
        nameTextField.getDocument().removeUndoableEditListener(manager);
        descriptionTextArea.getDocument().removeUndoableEditListener(manager);
    }

    private void modify() {
        modified = true;
        saveRoleButton.setEnabled(modified);
        reloadRoleButton.setEnabled(modified && !newRole);

        StatusDisplayer.getDefault().setStatusText("");
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        modify();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        modify();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        modify();
    }

    @Override
    public void valueChanged(ListSelectionEvent event) {
        if (!event.getValueIsAdjusting()) {
            if (privilegeTable.getSelectedRow() > -1) {
                privilegeList.clear();
                for (int i : privilegeTable.getSelectedRows()) {
                    privilegeList.add(model.getRow(privilegeTable.convertRowIndexToModel(i)));
                }
                modify();
            }
        }
    }

    @Override
    public void tableChanged(TableModelEvent e) {
    }
}
