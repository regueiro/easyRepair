/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package es.regueiro.easyrepair.ui.employee;

import com.google.i18n.phonenumbers.NumberParseException;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;
import es.regueiro.easyrepair.model.employee.Employee;
import es.regueiro.easyrepair.model.shared.Address;
import es.regueiro.easyrepair.model.shared.Email;
import es.regueiro.easyrepair.model.shared.Phone;
import es.regueiro.easyrepair.reports.ReportPrinter;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Collection;
import javax.swing.SwingWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//es.regueiro.easyrepair.ui.employee//EmployeeDetailedView//EN",
autostore = false)
@TopComponent.Description(iconBase = "es/regueiro/easyrepair/ui/employee/icons/mechanic_detailed.png", preferredID = "EmployeeDetailedViewTopComponent",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(position = 12, mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "es.regueiro.easyrepair.ui.employee.EmployeeDetailedViewTopComponent")
@TopComponent.OpenActionRegistration(displayName = "#CTL_EmployeeDetailedViewAction",
preferredID = "EmployeeDetailedViewTopComponent")
@Messages({
    "CTL_EmployeeDetailedViewAction=Vista detallada de empleados",
    "CTL_EmployeeDetailedViewTopComponent=Vista detallada de empleados",
    "HINT_EmployeeDetailedViewTopComponent=Esta es una ventana de la vista detallada de empleados"
})
public final class EmployeeDetailedViewTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<Employee> result = null;
    private Employee employee;
    private PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();

    public EmployeeDetailedViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_EmployeeDetailedViewTopComponent());
        setToolTipText(Bundle.HINT_EmployeeDetailedViewTopComponent());
        this.setFocusable(true);


        setupAddressComboBox();
        setupEmailComboBox();
        setupPhoneComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        generalPanel = new javax.swing.JPanel();
        nssLabel = new javax.swing.JLabel();
        surnameTextField = new javax.swing.JTextField();
        occupationLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        occupationTextField = new javax.swing.JTextField();
        surnameLabel = new javax.swing.JLabel();
        nssTextField = new javax.swing.JTextField();
        nifLabel = new javax.swing.JLabel();
        nifTextField = new javax.swing.JTextField();
        tittleLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        employeeIdLabel = new javax.swing.JLabel();
        employeeIdTextField = new javax.swing.JTextField();
        printButton = new javax.swing.JButton();
        extendedDataTabbedPane = new javax.swing.JTabbedPane();
        addressPanel = new javax.swing.JPanel();
        addressLabelLabel = new javax.swing.JLabel();
        addressStreetLabel = new javax.swing.JLabel();
        addressCityLabel = new javax.swing.JLabel();
        addressProvinceLabel = new javax.swing.JLabel();
        addressPostalCodeLabel = new javax.swing.JLabel();
        addressCountryLabel = new javax.swing.JLabel();
        addressLabelTextField = new javax.swing.JTextField();
        addressStreetTextField = new javax.swing.JTextField();
        addressCityTextField = new javax.swing.JTextField();
        addressProvinceTextField = new javax.swing.JTextField();
        addressPostalCodeTextField = new javax.swing.JTextField();
        addressCountryTextField = new javax.swing.JTextField();
        addressComboBox = new javax.swing.JComboBox();
        addressNotesLabel = new javax.swing.JLabel();
        addressNotesScrollPane = new javax.swing.JScrollPane();
        addressNotesTextArea = new javax.swing.JTextArea();
        emailPanel = new javax.swing.JPanel();
        emailLabelLabel = new javax.swing.JLabel();
        emailAddressLabel = new javax.swing.JLabel();
        emailAddressTextField = new javax.swing.JTextField();
        emailLabelTextField = new javax.swing.JTextField();
        emailComboBox = new javax.swing.JComboBox();
        emailNotesLabel = new javax.swing.JLabel();
        emailNotesScrollPane = new javax.swing.JScrollPane();
        emailNotesTextArea = new javax.swing.JTextArea();
        phonePanel = new javax.swing.JPanel();
        phoneLabelLabel = new javax.swing.JLabel();
        phoneNumberLabel = new javax.swing.JLabel();
        phoneLabelTextField = new javax.swing.JTextField();
        phoneNumberTextField = new javax.swing.JTextField();
        phoneComboBox = new javax.swing.JComboBox();
        phoneNotesLabel = new javax.swing.JLabel();
        phoneNotesScrollPane = new javax.swing.JScrollPane();
        phoneNotesTextArea = new javax.swing.JTextArea();
        notesPanel = new javax.swing.JPanel();
        notesScrollPane = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        mainScrollPane.setBorder(null);

        mainPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        mainPanel.setLayout(new java.awt.GridBagLayout());

        generalPanel.setMinimumSize(new java.awt.Dimension(100, 192));
        generalPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(nssLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.nssLabel.text")); // NOI18N
        nssLabel.setPreferredSize(new java.awt.Dimension(80, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nssLabel, gridBagConstraints);

        surnameTextField.setBackground(new java.awt.Color(232, 231, 231));
        surnameTextField.setEditable(false);
        surnameTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        surnameTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(surnameTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(occupationLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.occupationLabel.text")); // NOI18N
        occupationLabel.setPreferredSize(new java.awt.Dimension(80, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(occupationLabel, gridBagConstraints);

        nameTextField.setBackground(new java.awt.Color(232, 231, 231));
        nameTextField.setEditable(false);
        nameTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        nameTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nameTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.nameLabel.text")); // NOI18N
        nameLabel.setPreferredSize(new java.awt.Dimension(80, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nameLabel, gridBagConstraints);

        occupationTextField.setBackground(new java.awt.Color(232, 231, 231));
        occupationTextField.setEditable(false);
        occupationTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        occupationTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(occupationTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(surnameLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.surnameLabel.text")); // NOI18N
        surnameLabel.setPreferredSize(new java.awt.Dimension(80, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(surnameLabel, gridBagConstraints);

        nssTextField.setBackground(new java.awt.Color(232, 231, 231));
        nssTextField.setEditable(false);
        nssTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        nssTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nssTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(nifLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.nifLabel.text")); // NOI18N
        nifLabel.setPreferredSize(new java.awt.Dimension(80, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nifLabel, gridBagConstraints);

        nifTextField.setBackground(new java.awt.Color(232, 231, 231));
        nifTextField.setEditable(false);
        nifTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        nifTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(nifTextField, gridBagConstraints);

        tittleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tittleLabel.setForeground(new java.awt.Color(82, 107, 134));
        org.openide.awt.Mnemonics.setLocalizedText(tittleLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.tittleLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        generalPanel.add(tittleLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(idLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.idLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(idLabel, gridBagConstraints);

        idTextField.setEditable(false);
        idTextField.setBackground(new java.awt.Color(232, 231, 231));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(idTextField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(employeeIdLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.employeeIdLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(employeeIdLabel, gridBagConstraints);

        employeeIdTextField.setBackground(new java.awt.Color(232, 231, 231));
        employeeIdTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(employeeIdTextField, gridBagConstraints);

        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/employee/icons/printer.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(printButton, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.printButton.text")); // NOI18N
        printButton.setEnabled(false);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(printButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(generalPanel, gridBagConstraints);

        extendedDataTabbedPane.setMinimumSize(new java.awt.Dimension(100, 100));

        addressPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(addressLabelLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.addressLabelLabel.text")); // NOI18N
        addressLabelLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressLabelLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(addressStreetLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.addressStreetLabel.text")); // NOI18N
        addressStreetLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressStreetLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(addressCityLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.addressCityLabel.text")); // NOI18N
        addressCityLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressCityLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(addressProvinceLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.addressProvinceLabel.text")); // NOI18N
        addressProvinceLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressProvinceLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(addressPostalCodeLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.addressPostalCodeLabel.text")); // NOI18N
        addressPostalCodeLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressPostalCodeLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(addressCountryLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.addressCountryLabel.text")); // NOI18N
        addressCountryLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressCountryLabel, gridBagConstraints);

        addressLabelTextField.setBackground(new java.awt.Color(232, 231, 231));
        addressLabelTextField.setEditable(false);
        addressLabelTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        addressLabelTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressLabelTextField, gridBagConstraints);

        addressStreetTextField.setBackground(new java.awt.Color(232, 231, 231));
        addressStreetTextField.setEditable(false);
        addressStreetTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        addressStreetTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressStreetTextField, gridBagConstraints);

        addressCityTextField.setBackground(new java.awt.Color(232, 231, 231));
        addressCityTextField.setEditable(false);
        addressCityTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        addressCityTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressCityTextField, gridBagConstraints);

        addressProvinceTextField.setBackground(new java.awt.Color(232, 231, 231));
        addressProvinceTextField.setEditable(false);
        addressProvinceTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        addressProvinceTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressProvinceTextField, gridBagConstraints);

        addressPostalCodeTextField.setBackground(new java.awt.Color(232, 231, 231));
        addressPostalCodeTextField.setEditable(false);
        addressPostalCodeTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        addressPostalCodeTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressPostalCodeTextField, gridBagConstraints);

        addressCountryTextField.setBackground(new java.awt.Color(232, 231, 231));
        addressCountryTextField.setEditable(false);
        addressCountryTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        addressCountryTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressCountryTextField, gridBagConstraints);

        addressComboBox.setMinimumSize(new java.awt.Dimension(100, 24));
        addressComboBox.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(addressNotesLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.addressNotesLabel.text")); // NOI18N
        addressNotesLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressNotesLabel, gridBagConstraints);

        addressNotesTextArea.setEditable(false);
        addressNotesTextArea.setBackground(new java.awt.Color(232, 231, 231));
        addressNotesTextArea.setColumns(20);
        addressNotesTextArea.setRows(3);
        addressNotesScrollPane.setViewportView(addressNotesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        addressPanel.add(addressNotesScrollPane, gridBagConstraints);

        extendedDataTabbedPane.addTab(org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.addressPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/employee/icons/book.png")), addressPanel); // NOI18N

        emailPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(emailLabelLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.emailLabelLabel.text")); // NOI18N
        emailLabelLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        emailPanel.add(emailLabelLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(emailAddressLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.emailAddressLabel.text")); // NOI18N
        emailAddressLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        emailPanel.add(emailAddressLabel, gridBagConstraints);

        emailAddressTextField.setBackground(new java.awt.Color(232, 231, 231));
        emailAddressTextField.setEditable(false);
        emailAddressTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        emailAddressTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        emailPanel.add(emailAddressTextField, gridBagConstraints);

        emailLabelTextField.setBackground(new java.awt.Color(232, 231, 231));
        emailLabelTextField.setEditable(false);
        emailLabelTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        emailLabelTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        emailPanel.add(emailLabelTextField, gridBagConstraints);

        emailComboBox.setMinimumSize(new java.awt.Dimension(100, 24));
        emailComboBox.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        emailPanel.add(emailComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(emailNotesLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.emailNotesLabel.text")); // NOI18N
        emailNotesLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        emailPanel.add(emailNotesLabel, gridBagConstraints);

        emailNotesTextArea.setEditable(false);
        emailNotesTextArea.setBackground(new java.awt.Color(232, 231, 231));
        emailNotesTextArea.setColumns(20);
        emailNotesTextArea.setRows(5);
        emailNotesScrollPane.setViewportView(emailNotesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        emailPanel.add(emailNotesScrollPane, gridBagConstraints);

        extendedDataTabbedPane.addTab(org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.emailPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/employee/icons/email.png")), emailPanel); // NOI18N

        phonePanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(phoneLabelLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.phoneLabelLabel.text")); // NOI18N
        phoneLabelLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        phonePanel.add(phoneLabelLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(phoneNumberLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.phoneNumberLabel.text")); // NOI18N
        phoneNumberLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        phonePanel.add(phoneNumberLabel, gridBagConstraints);

        phoneLabelTextField.setBackground(new java.awt.Color(232, 231, 231));
        phoneLabelTextField.setEditable(false);
        phoneLabelTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        phoneLabelTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        phonePanel.add(phoneLabelTextField, gridBagConstraints);

        phoneNumberTextField.setBackground(new java.awt.Color(232, 231, 231));
        phoneNumberTextField.setEditable(false);
        phoneNumberTextField.setMinimumSize(new java.awt.Dimension(180, 20));
        phoneNumberTextField.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        phonePanel.add(phoneNumberTextField, gridBagConstraints);

        phoneComboBox.setMinimumSize(new java.awt.Dimension(100, 24));
        phoneComboBox.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        phonePanel.add(phoneComboBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(phoneNotesLabel, org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.phoneNotesLabel.text")); // NOI18N
        phoneNotesLabel.setPreferredSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        phonePanel.add(phoneNotesLabel, gridBagConstraints);

        phoneNotesTextArea.setBackground(new java.awt.Color(232, 231, 231));
        phoneNotesTextArea.setColumns(20);
        phoneNotesTextArea.setEditable(false);
        phoneNotesTextArea.setRows(5);
        phoneNotesScrollPane.setViewportView(phoneNotesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        phonePanel.add(phoneNotesScrollPane, gridBagConstraints);

        extendedDataTabbedPane.addTab(org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.phonePanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/employee/icons/phone_Android.png")), phonePanel); // NOI18N

        notesPanel.setLayout(new java.awt.GridBagLayout());

        notesTextArea.setBackground(new java.awt.Color(232, 231, 231));
        notesTextArea.setColumns(20);
        notesTextArea.setEditable(false);
        notesTextArea.setRows(5);
        notesScrollPane.setViewportView(notesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        notesPanel.add(notesScrollPane, gridBagConstraints);

        extendedDataTabbedPane.addTab(org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.notesPanel.TabConstraints.tabTitle"), new javax.swing.ImageIcon(getClass().getResource("/es/regueiro/easyrepair/ui/employee/icons/document_notes.png")), notesPanel); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(extendedDataTabbedPane, gridBagConstraints);
        extendedDataTabbedPane.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(EmployeeDetailedViewTopComponent.class, "EmployeeDetailedViewTopComponent.extendedDataTabbedPane.AccessibleContext.accessibleName")); // NOI18N

        mainScrollPane.setViewportView(mainPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(mainScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        final SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected void done() {
            }

            @Override
            protected Void doInBackground() {
                ReportPrinter printer = new ReportPrinter();
                printer.printEmployee(employee);
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_printButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressCityLabel;
    private javax.swing.JTextField addressCityTextField;
    private javax.swing.JComboBox addressComboBox;
    private javax.swing.JLabel addressCountryLabel;
    private javax.swing.JTextField addressCountryTextField;
    private javax.swing.JLabel addressLabelLabel;
    private javax.swing.JTextField addressLabelTextField;
    private javax.swing.JLabel addressNotesLabel;
    private javax.swing.JScrollPane addressNotesScrollPane;
    private javax.swing.JTextArea addressNotesTextArea;
    private javax.swing.JPanel addressPanel;
    private javax.swing.JLabel addressPostalCodeLabel;
    private javax.swing.JTextField addressPostalCodeTextField;
    private javax.swing.JLabel addressProvinceLabel;
    private javax.swing.JTextField addressProvinceTextField;
    private javax.swing.JLabel addressStreetLabel;
    private javax.swing.JTextField addressStreetTextField;
    private javax.swing.JLabel emailAddressLabel;
    private javax.swing.JTextField emailAddressTextField;
    private javax.swing.JComboBox emailComboBox;
    private javax.swing.JLabel emailLabelLabel;
    private javax.swing.JTextField emailLabelTextField;
    private javax.swing.JLabel emailNotesLabel;
    private javax.swing.JScrollPane emailNotesScrollPane;
    private javax.swing.JTextArea emailNotesTextArea;
    private javax.swing.JPanel emailPanel;
    private javax.swing.JLabel employeeIdLabel;
    private javax.swing.JTextField employeeIdTextField;
    private javax.swing.JTabbedPane extendedDataTabbedPane;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel nifLabel;
    private javax.swing.JTextField nifTextField;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JScrollPane notesScrollPane;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JLabel nssLabel;
    private javax.swing.JTextField nssTextField;
    private javax.swing.JLabel occupationLabel;
    private javax.swing.JTextField occupationTextField;
    private javax.swing.JComboBox phoneComboBox;
    private javax.swing.JLabel phoneLabelLabel;
    private javax.swing.JTextField phoneLabelTextField;
    private javax.swing.JLabel phoneNotesLabel;
    private javax.swing.JScrollPane phoneNotesScrollPane;
    private javax.swing.JTextArea phoneNotesTextArea;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JTextField phoneNumberTextField;
    private javax.swing.JPanel phonePanel;
    private javax.swing.JButton printButton;
    private javax.swing.JLabel surnameLabel;
    private javax.swing.JTextField surnameTextField;
    private javax.swing.JLabel tittleLabel;
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public HelpCtx getHelpCtx() {
        return new HelpCtx("es.regueiro.easyrepair.ui.employee.detailed");
    }

    @Override
    public void componentOpened() {
        result = EmployeeLookup.getDefault().lookupResult(Employee.class);
        result.addLookupListener(this);
        fillData();
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;

    }

    @Override
    public void resultChanged(LookupEvent event) {
        fillData();
    }

    private void fillData() {
        Collection<? extends Employee> employeeCol = result.allInstances();
        if (!employeeCol.isEmpty()) {
            Employee tempEmployee = employeeCol.iterator().next();
            if (employee != tempEmployee) {
                employee = tempEmployee;
                clearGeneral();
                clearNotes();

                idTextField.setText(employee.getId().toString());
                employeeIdTextField.setText(employee.getEmployeeId());
                nameTextField.setText(employee.getName());
                surnameTextField.setText(employee.getSurname());
                if (employee.getNif() != null) {
                    nifTextField.setText(employee.getNif().getNumber());
                }
                if (employee.getNss() != null) {
                    nssTextField.setText(employee.getNss().getNumber());
                }
                occupationTextField.setText(employee.getOccupation());

                fillAddresses();
                fillEmails();
                fillPhones();
                if (employee.getNotes() != null) {
                    notesTextArea.setText(employee.getNotes());
                    extendedDataTabbedPane.setEnabledAt(3, true);
                    if (!extendedDataTabbedPane.isEnabledAt(0)
                            && !extendedDataTabbedPane.isEnabledAt(1)
                            && !extendedDataTabbedPane.isEnabledAt(2)) {
                        extendedDataTabbedPane.setSelectedIndex(3);
                    }
                }

                printButton.setEnabled(true);
            }
        } else {
//            clear();
            extendedDataTabbedPane.setEnabledAt(0, false);
            extendedDataTabbedPane.setEnabledAt(1, false);
            extendedDataTabbedPane.setEnabledAt(2, false);
            extendedDataTabbedPane.setEnabledAt(3, false);
        }
    }

    private void fillAddresses() {
        clearAddresses();
        if (employee.getAddress() != null && !employee.getAddress().isEmpty()) {
            extendedDataTabbedPane.setEnabledAt(0, true);
            for (Address a : employee.getAddress()) {
                AddressBox adddress = new AddressBox(a.getLabel(), a);
                addressComboBox.addItem(adddress);
            }
            addressComboBox.setEnabled(true);
            extendedDataTabbedPane.setSelectedIndex(0);
        }
    }

    private void fillPhones() {
        clearPhones();
        if (employee.getPhone() != null && !employee.getPhone().isEmpty()) {
            extendedDataTabbedPane.setEnabledAt(2, true);
            for (Phone p : employee.getPhone()) {
                PhoneBox phone = new PhoneBox(p.getLabel(), p);
                phoneComboBox.addItem(phone);
            }
            phoneComboBox.setEnabled(true);
            if (!extendedDataTabbedPane.isEnabledAt(0)
                    && !extendedDataTabbedPane.isEnabledAt(1)) {
                extendedDataTabbedPane.setSelectedIndex(2);
            }
        }
    }

    private void fillEmails() {
        clearEmails();
        if (employee.getEmail() != null && !employee.getEmail().isEmpty()) {
            extendedDataTabbedPane.setEnabledAt(1, true);
            for (Email e : employee.getEmail()) {
                EmailBox email = new EmailBox(e.getLabel(), e);
                emailComboBox.addItem(email);
            }
            emailComboBox.setEnabled(true);
            if (!extendedDataTabbedPane.isEnabledAt(0)) {
                extendedDataTabbedPane.setSelectedIndex(1);
            }
        }
    }

    private void clear() {
        employee = null;
        clearGeneral();
        clearAddresses();
        clearEmails();
        clearPhones();
        clearNotes();
    }

    private void clearGeneral() {
        employeeIdTextField.setText("");
        nameTextField.setText("");
        surnameTextField.setText("");
        idTextField.setText("");
        nifTextField.setText("");
        nssTextField.setText("");
        occupationTextField.setText("");
        extendedDataTabbedPane.setEnabledAt(0, false);
        extendedDataTabbedPane.setEnabledAt(1, false);
        extendedDataTabbedPane.setEnabledAt(2, false);
        extendedDataTabbedPane.setEnabledAt(3, false);
        printButton.setEnabled(false);
    }

    private void clearEmails() {
        extendedDataTabbedPane.setEnabledAt(1, false);
        emailComboBox.setEnabled(false);
        emailComboBox.removeAllItems();
        emailAddressTextField.setText("");
        emailLabelTextField.setText("");
        emailNotesTextArea.setText("");
    }

    private void clearPhones() {
        extendedDataTabbedPane.setEnabledAt(2, false);
        phoneComboBox.setEnabled(false);
        phoneComboBox.removeAllItems();
        phoneNumberTextField.setText("");
        phoneLabelTextField.setText("");
        phoneNotesTextArea.setText("");
    }

    private void clearNotes() {
        extendedDataTabbedPane.setEnabledAt(3, false);
        notesTextArea.setText("");
    }

    private void clearAddresses() {
        extendedDataTabbedPane.setEnabledAt(0, false);
        addressComboBox.setEnabled(false);
        addressComboBox.removeAllItems();
        addressCityTextField.setText("");
        addressCountryTextField.setText("");
        addressLabelTextField.setText("");
        addressPostalCodeTextField.setText("");
        addressProvinceTextField.setText("");
        addressStreetTextField.setText("");
        addressNotesTextArea.setText("");
    }

    private void setupEmailComboBox() {
        emailComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    EmailBox email = (EmailBox) e.getItem();

                    if (email != null && email.email != null) {
                        emailLabelTextField.setText(email.email.getLabel());
                        emailAddressTextField.setText(email.email.getAddress());
                        emailNotesTextArea.setText(email.email.getNotes());
                    }
                }
            }
        });
    }

    private void setupAddressComboBox() {
        addressComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    AddressBox address = (AddressBox) e.getItem();

                    if (address != null && address.address != null) {
                        addressStreetTextField.setText(address.address.getStreet());
                        addressProvinceTextField.setText(address.address.getProvince());
                        addressPostalCodeTextField.setText(address.address.getPostalCode());
                        addressCityTextField.setText(address.address.getCity());
                        addressCountryTextField.setText(address.address.getCountry());
                        addressLabelTextField.setText(address.address.getLabel());
                        addressNotesTextArea.setText(address.address.getNotes());
                    }
                }
            }
        });
    }

    private void setupPhoneComboBox() {
        phoneComboBox.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    PhoneBox phone = (PhoneBox) e.getItem();

                    if (phone != null && phone.phone != null) {
                        phoneLabelTextField.setText(phone.phone.getLabel());
                        String formattedPhone;
                        Phonenumber.PhoneNumber numberProto;
                        try {
                            numberProto = phoneUtil.parse(phone.phone.getNumber(), "ES");
                        } catch (NumberParseException ex) {
                            throw new IllegalArgumentException("This shouldn't happen " + ex.getMessage());
                        }
                        if (numberProto.getCountryCode() == 34) {
                            phoneNumberTextField.setText(phoneUtil.format(numberProto, PhoneNumberUtil.PhoneNumberFormat.NATIONAL));
                        } else {
                            phoneNumberTextField.setText(phoneUtil.format(numberProto, PhoneNumberUtil.PhoneNumberFormat.INTERNATIONAL));
                        }
                        phoneNotesTextArea.setText(phone.phone.getNotes());
                    }
                }
            }
        });
    }

    private class AddressBox {

        public Address address;
        public String label;

        public AddressBox(String label, Address address) {
            this.label = label;
            this.address = address;
        }

        @Override
        public String toString() {
            return this.label;
        }
    }

    private class PhoneBox {

        public Phone phone;
        public String label;

        public PhoneBox(String label, Phone phone) {
            this.label = label;
            this.phone = phone;
        }

        @Override
        public String toString() {
            return this.label;
        }
    }

    private class EmailBox {

        public Email email;
        public String label;

        public EmailBox(String label, Email email) {
            this.label = label;
            this.email = email;
        }

        @Override
        public String toString() {
            return this.label;
        }
    }
}
